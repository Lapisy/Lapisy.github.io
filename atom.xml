<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lapisy的博客]]></title>
  <link href="http://blog.lapisy.com/atom.xml" rel="self"/>
  <link href="http://blog.lapisy.com/"/>
  <updated>2020-02-21T17:35:53+08:00</updated>
  <id>http://blog.lapisy.com/</id>
  <author>
    <name><![CDATA[Lapisy]]></name>
    <email><![CDATA[softgeek@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android资源框架-主题Theme和Style]]></title>
    <link href="http://blog.lapisy.com/blog/2020/02/21/androidzi-yuan-kuang-jia-zhu-ti-themehe-style/"/>
    <updated>2020-02-21T10:49:37+08:00</updated>
    <id>http://blog.lapisy.com/blog/2020/02/21/androidzi-yuan-kuang-jia-zhu-ti-themehe-style</id>
    <content type="html"><![CDATA[<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2020一些新的计划]]></title>
    <link href="http://blog.lapisy.com/blog/2020/01/24/202020-xie-xin-de-ji-hua/"/>
    <updated>2020-01-24T11:29:39+08:00</updated>
    <id>http://blog.lapisy.com/blog/2020/01/24/202020-xie-xin-de-ji-hua</id>
    <content type="html"><![CDATA[<h4>技术上</h4>

<h4>1. 深入学习Android资源框架</h4>

<ul>
<li>深入研究Android系统中资源框架，能够比较仔细的了解资源打包，创建，加载，查找等过程，并形成博客</li>
<li>结合之前做得资源上云的功能，开发一套插件化资源加载框架</li>
<li>开发出Demo，解析resource.arsc文件每个块的数据和结构</li>
<li>Gradle编译过程</li>
</ul>


<h4>Android优化</h4>

<ul>
<li>App的优化，包括各个方面，电量，内存，网络等</li>
<li>APM平台，涉及到的ASM，编译打包过程，AOP编程等</li>
<li>能最后形成一个sdk能够统计一个APP的整体性能，结合目前市面是已经有的工具</li>
</ul>


<h4>2. 深入学习PMS/AMS</h4>

<ul>
<li>学习AMS四大组件加载过程，结合插件化来学习</li>
<li>能够形成比较全面的插件化工具类</li>
</ul>


<h4>3. 深入学习Android系统音视频模块</h4>

<ul>
<li>学习音视频的基础知识，总结，并形成博客</li>
<li>实习系统录制音频和视频的功能（类比华为系统）</li>
<li>初步学习FFEGMENG，能够开发一个比较全面的视频播放器</li>
</ul>


<h4>4. 每周至少1-2篇博客</h4>

<h3>生活上</h3>

<ul>
<li>每周运动至少2次，每次半个小时以上</li>
<li>学习行楷</li>
<li>今年至少读10本书</li>
</ul>


<h3>理财</h3>

<ul>
<li>学习理财相关的知识，比如股票，基金，形成自己对于财富的认知理念</li>
</ul>


<h3>思想/认知</h3>

<ul>
<li>学习新的思考方式，学些新的学习方法，完善自己的学习和思考方法论</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VisualStudio Code使用总结]]></title>
    <link href="http://blog.lapisy.com/blog/2019/05/12/vs-codeshi-yong-zong-jie/"/>
    <updated>2019-05-12T09:16:08+08:00</updated>
    <id>http://blog.lapisy.com/blog/2019/05/12/vs-codeshi-yong-zong-jie</id>
    <content type="html"><![CDATA[<h3>常用的设置</h3>

<h4>1. 关闭右侧预览</h4>

<p>搜索<code>editor.minimap.enabled</code>，可以控制是否关闭地图</p>

<h4>2. 关闭预览模式</h4>

<p>预览模式会导致打开的文件都会重用一个tab，<code>enable preview</code>，可以控制关闭和打开</p>

<h3>快捷键</h3>

<h4>1. 搜索文件</h4>

<p><code>ctrol+p</code>或者<code>command+p</code></p>

<h4>2. 搜索内容</h4>

<p><code>ctorl+shfit+f</code></p>

<h4>3. 打开面板</h4>

<p><code>shift + command + p</code></p>

<!-- more -->


<h3>常用插件</h3>

<h4>1. Markdown预览插件</h4>

<p>自己喜欢Github的MarkDown渲染模式，简介大方，因此下载了<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles">Markdown Preview Github Styling</a></p>

<h3>参考</h3>

<p><a href="https://juejin.im/post/5c45b92751882525487c5c66">在 vscode 中写 Markdown 如何装X</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android系统工具之Systrace介绍和使用]]></title>
    <link href="http://blog.lapisy.com/blog/2019/04/30/androidxi-tong-gong-ju-zhi-systracejie-shao-he-shi-yong/"/>
    <updated>2019-04-30T11:16:25+08:00</updated>
    <id>http://blog.lapisy.com/blog/2019/04/30/androidxi-tong-gong-ju-zhi-systracejie-shao-he-shi-yong</id>
    <content type="html"><![CDATA[<h3>一：概述</h3>

<p>&#8195;1. 什么是Systrace？</p>

<p>&#8195;2. Systrace具体使用方式？</p>

<p>&#8195;3. Systrace的实际应用？</p>

<h3>二：Systrace的使用</h3>

<h4>2.1 生成trace.html文件</h4>

<p>如何抓取trace.html有两种方式，一种是通过命令行的方式，一种是通过命令行的方式</p>

<h5>2.1.1 命令行抓取</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">python</span> <span class="n">systrace</span><span class="o">.</span><span class="na">py</span> <span class="o">[</span><span class="n">options</span><span class="o">]</span> <span class="o">[</span><span class="n">categories</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>[options]</code> 是一些命令参数，<code>[category]</code> 等是你感兴趣的系统模块，比如view代表view系统（包含绘制流程），am代表ActivityManager（包含Activity创建过程等）；分析不同问题的时候，可以选择不同你感兴趣的模块。需要重复的是，尽可能缩小需要Trace的模块，其一是数据量小易与分析；其二，虽然systrace本身开销很小，但是缩小需要Trace的模块也能减少运行时开销。比如你分析卡顿的时候，<code>power</code>, <code>webview</code> 就几乎是无用的。</p>

<!--more-->


<p><code>[option]</code> 中比较重要的几个参数如下：</p>

<ul>
<li><strong>-a <package_name></strong>：这个选项可以开启指定包名App中自定义Trace Label的Trace功能。也就是说，如果你在代码中使用了<code>Trace.beginSection("tag")</code>, <code>Trace.endSection</code>；默认情况下，你的这些代码是不会生效的，因此，这个选项一定要开启！</li>
<li><strong>-t N</strong>：用来指定Trace运行的时间，取决于你需要分析过程的时间；还是那句话，在需要的时候尽可能缩小时间；当然，绝对不要把时间设的太短导致你操作没完Trace就跑完了，这样会出现<code>Did not finish</code> 的标签，分析数据就基本无效了。</li>
<li><strong>-l</strong>：这个用来列出你分析的那个手机系统支持的Trace模块；也就是上面命令中 <code>[category1]</code>能使用的部分；不同版本的系统能支持的模块是不同的，一般来说，高版本的支持的模块更多。</li>
<li><strong>-o FILE</strong>：指定trace数据文件的输出路径，如果不指定就是当前目录的<code>trace.html</code>。</li>
</ul>


<p><strong><code>systrace.py -l</code></strong> 可以输出手机能支持的Trace模块，而且输出还给出了此模块的用途；常用的模块如下：</p>

<ul>
<li><code>sched</code>: CPU调度的信息，非常重要；你能看到CPU在每个时间段在运行什么线程；线程调度情况，比如锁信息。</li>
<li><code>gfx</code>：Graphic系统的相关信息，包括SerfaceFlinger，VSYNC消息，Texture，RenderThread等；分析卡顿非常依赖这个。</li>
<li><code>view</code>: View绘制系统的相关信息，比如onMeasure，onLayout等；对分析卡顿比较有帮助。</li>
<li><code>am</code>：ActivityManager调用的相关信息；用来分析Activity的启动过程比较有效。</li>
<li><code>dalvik</code>: 虚拟机相关信息，比如GC停顿等。</li>
<li><code>binder_driver</code>: Binder驱动的相关信息，如果你怀疑是Binder IPC的问题，不妨打开这个。</li>
<li><code>core_services</code>: SystemServer中系统核心Service的相关信息，分析特定问题用。</li>
</ul>


<p>具体的例子如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">python</span> <span class="n">systrace</span><span class="o">.</span><span class="na">py</span> <span class="o">-</span><span class="n">t</span> <span class="mi">10</span> <span class="o">-</span><span class="n">o</span> <span class="n">mynewtrace</span><span class="o">.</span><span class="na">html</span> <span class="n">sched</span> <span class="n">freq</span> <span class="n">idle</span> <span class="n">am</span> <span class="n">wm</span> <span class="n">gfx</span> <span class="n">view</span> <span class="err">\</span>
</span><span class='line'>    <span class="n">binder_driver</span> <span class="n">hal</span> <span class="n">dalvik</span> <span class="n">camera</span> <span class="n">input</span> <span class="n">res</span> <span class="o">-</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">package</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.1.2 图形界面抓取</h5>

<p>这个挺简单的，就是在Android device monitor上面来抓取，具体可以参考<a href="https://www.jianshu.com/p/0670fe8507ff">这篇文章</a>。</p>

<blockquote><p> 注意：Android device monitor在高版本中，没有集成在AndroidStudio中，可以去sdk里面的tools文件下面找到这个运行的工具</p></blockquote>

<h4>2.2 自定义获取的位置</h4>

<p>如果我们不自己定义一些标签，那么加载出来的都是系统内置的一些section，那么我们是否可以自己来定义一些开始和结束的位置呢？肯定是可以的，我们可以通过如下的方式来定义开始和结束的位置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">beginTrace</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">){</span>
</span><span class='line'>      <span class="c1">//有一定的版本要求</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">JELLY_BEAN_MR2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Trace</span><span class="o">.</span><span class="na">beginSection</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">endTrace</span><span class="o">(){</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">JELLY_BEAN_MR2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Trace</span><span class="o">.</span><span class="na">endSection</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>beginSection</code>和<code>endSection</code>都是成对出现的，也是成对匹配的，使用过程中注意。加入添加了一个<strong>MainActivity_init</strong>的trace，那么生成的结果为：</p>

<p><img src="http://blog.lapisy.com/images/systrace-1.png" alt="systrace-1" /></p>

<blockquote><p>这里需要注意的地方是，<code>beginSection</code>和<code>endSection</code>必须在同一个线程中，否则抓取不到。</p></blockquote>

<h4>2.3 分析trace.html文件</h4>

<p>如何见上面生成的trace.html打开呢？有的人是直接点击浏览器，用chrome打开，但是有的时候会出现问题，比如卡顿，报错等，正确的打开方式是：</p>

<p>&#8195;1. 在在chrome地址栏中输入<strong>chrome:tracing</strong>，会加载出分析trace.html的框架；</p>

<p>&#8195;2. 点击load按钮加载制定地址的trace.html文件；</p>

<p>那么如何分析trace.html这个文件呢？</p>

<table>
<thead>
<tr>
<th> 名词          </th>
<th> 解释                              </th>
</tr>
</thead>
<tbody>
<tr>
<td> Wall Duration </td>
<td> 代表着这一区块的开始到结束的耗时  </td>
</tr>
<tr>
<td> CPU Duration  </td>
<td> 实际CPU在处理这一区块所消耗的时间 </td>
</tr>
<tr>
<td> Self Time     </td>
<td> 自身方法耗时（不包含其调用方法）  </td>
</tr>
<tr>
<td> CPU Self Time </td>
<td> 自身方法cpu执行时间               </td>
</tr>
</tbody>
</table>


<h4>参考：</h4>

<p><a href="https://developer.android.com/studio/command-line/systrace">点击查看官方介绍</a></p>

<p><a href="[http://gityuan.com/2016/01/17/systrace/](http://gityuan.com/2016/01/17/systrace/">快捷键操作具体介绍</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android系统之ANR日志收集过程-Java层]]></title>
    <link href="http://blog.lapisy.com/blog/2019/04/29/androidxi-tong-zhi-anrri-zhi-shou-ji-guo-cheng/"/>
    <updated>2019-04-29T22:24:59+08:00</updated>
    <id>http://blog.lapisy.com/blog/2019/04/29/androidxi-tong-zhi-anrri-zhi-shou-ji-guo-cheng</id>
    <content type="html"><![CDATA[<blockquote><p>文章所有的源码都是基于SDK-28的版本，也就是Android P的版本</p></blockquote>

<h3>一：概述</h3>

<p>我们在解决ANR异常时，一般是利用打印出来的anr log，还有就是发生ANR的栈信息。一般情况下解决ANR步骤为：</p>

<p>&#8195;1. 先利用main log来查看ANR发生的原因，是DispatchTimeout还是BroadcastTimeout，还是ServiceTimeout。同时也可以看发生ANA之前或者之后的各个进程CPU的使用情况。其基本的格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">08</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mf">46.009</span> <span class="mi">1638</span><span class="o">-</span><span class="mi">1668</span><span class="o">/</span><span class="n">system_process</span> <span class="n">E</span><span class="o">/</span><span class="nl">ActivityManager:</span> <span class="n">ANR</span> <span class="n">in</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span> <span class="o">(</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span><span class="o">/.</span><span class="na">MainActivity</span><span class="o">)</span>
</span><span class='line'>    <span class="nl">PID:</span> <span class="mi">23720</span>
</span><span class='line'>    <span class="nl">Reason:</span> <span class="n">Input</span> <span class="n">dispatching</span> <span class="n">timed</span> <span class="nf">out</span> <span class="o">(</span><span class="n">Waiting</span> <span class="n">to</span> <span class="n">send</span> <span class="n">non</span><span class="o">-</span><span class="n">key</span> <span class="n">event</span> <span class="n">because</span> <span class="n">the</span> <span class="n">touched</span> <span class="n">window</span> <span class="n">has</span> <span class="n">not</span> <span class="n">finished</span> <span class="n">processing</span> <span class="n">certain</span> <span class="n">input</span> <span class="n">events</span> <span class="n">that</span> <span class="n">were</span> <span class="n">delivered</span> <span class="n">to</span> <span class="n">it</span> <span class="n">over</span> <span class="mf">500.0</span><span class="n">ms</span> <span class="n">ago</span><span class="o">.</span>  <span class="n">Wait</span> <span class="n">queue</span> <span class="nl">length:</span> <span class="mi">6</span><span class="o">.</span>  <span class="n">Wait</span> <span class="n">queue</span> <span class="n">head</span> <span class="nl">age:</span> <span class="mf">5533.6</span><span class="n">ms</span><span class="o">.)</span>
</span><span class='line'>    <span class="nl">Load:</span> <span class="mf">0.89</span> <span class="o">/</span> <span class="mf">0.44</span> <span class="o">/</span> <span class="mf">0.34</span>
</span><span class='line'>    <span class="n">CPU</span> <span class="n">usage</span> <span class="n">from</span> <span class="mi">839843</span><span class="n">ms</span> <span class="n">to</span> <span class="mi">0</span><span class="n">ms</span> <span class="nf">ago</span> <span class="o">(</span><span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">18</span> <span class="mi">18</span><span class="o">:</span><span class="mi">35</span><span class="o">:</span><span class="mf">53.827</span> <span class="n">to</span> <span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">08</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mf">44.991</span><span class="o">):</span>
</span><span class='line'>      <span class="mf">4.5</span><span class="o">%</span> <span class="mi">1638</span><span class="o">/</span><span class="nl">system_server:</span> <span class="mi">3</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">1.4</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">22176</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">2.2</span><span class="o">%</span> <span class="mi">1387</span><span class="o">/</span><span class="nl">adbd:</span> <span class="mf">0.2</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">2</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">49043</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.8</span><span class="o">%</span> <span class="mi">1401</span><span class="o">/</span><span class="n">android</span><span class="o">.</span><span class="na">hardware</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">composer</span><span class="err">@</span><span class="mf">2.1</span><span class="o">-</span><span class="nl">service:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.7</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">18</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.4</span><span class="o">%</span> <span class="mi">1395</span><span class="o">/</span><span class="n">android</span><span class="o">.</span><span class="na">hardware</span><span class="o">.</span><span class="na">audio</span><span class="err">@</span><span class="mf">2.0</span><span class="o">-</span><span class="nl">service:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.4</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">3</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.4</span><span class="o">%</span> <span class="mi">1491</span><span class="o">/</span><span class="nl">audioserver:</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.3</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">7</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.4</span><span class="o">%</span> <span class="mi">1413</span><span class="o">/</span><span class="nl">surfaceflinger:</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.2</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">49</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.2</span><span class="o">%</span> <span class="mi">1780</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">systemui</span><span class="o">:</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">1488</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.1</span><span class="o">%</span> <span class="mi">1868</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">phone</span><span class="o">:</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">1056</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.1</span><span class="o">%</span> <span class="mi">1335</span><span class="o">/</span><span class="nl">logd:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">47</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.1</span><span class="o">%</span> <span class="mi">2223</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">launcher3</span><span class="o">:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">2852</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.1</span><span class="o">%</span> <span class="mi">7</span><span class="o">/</span><span class="nl">rcu_preempt:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.1</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>      <span class="o">.....</span>
</span><span class='line'><span class="n">CPU</span> <span class="n">usage</span> <span class="n">from</span> <span class="mi">79</span><span class="n">ms</span> <span class="n">to</span> <span class="mi">620</span><span class="n">ms</span> <span class="nf">later</span> <span class="o">(</span><span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">10</span><span class="o">:</span><span class="mi">29</span><span class="o">:</span><span class="mf">21.096</span> <span class="n">to</span> <span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">10</span><span class="o">:</span><span class="mi">29</span><span class="o">:</span><span class="mf">21.637</span><span class="o">):</span>
</span><span class='line'>      <span class="mi">159</span><span class="o">%</span> <span class="mi">8892</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">huawei</span><span class="o">.</span><span class="na">systemmanager</span><span class="o">:</span> <span class="mi">146</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">13</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">751</span> <span class="n">minor</span> <span class="mi">2</span> <span class="n">major</span>
</span><span class='line'>        <span class="mi">92</span><span class="o">%</span> <span class="mi">9393</span><span class="o">/</span><span class="n">pool</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">2</span><span class="o">:</span> <span class="mi">92</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>        <span class="mi">16</span><span class="o">%</span> <span class="mi">9436</span><span class="o">/</span><span class="nl">refresh_permiss:</span> <span class="mi">13</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">2.7</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>        <span class="mf">8.1</span><span class="o">%</span> <span class="mi">8902</span><span class="o">/</span><span class="nl">HeapTaskDaemon:</span> <span class="mf">8.1</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>        <span class="mf">2.7</span><span class="o">%</span> <span class="mi">9428</span><span class="o">/</span><span class="nl">PermissionAppsC:</span> <span class="mf">2.7</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>       <span class="o">+</span><span class="mi">0</span><span class="o">%</span> <span class="mi">9453</span><span class="o">/</span><span class="n">pool</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>       <span class="o">+</span><span class="mi">0</span><span class="o">%</span> <span class="mi">9457</span><span class="o">/</span><span class="n">pool</span><span class="o">-</span><span class="mi">8</span><span class="o">-</span><span class="n">thread</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">0</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>      <span class="mi">99</span><span class="o">%</span> <span class="mi">1279</span><span class="o">/</span><span class="nl">system_server:</span> <span class="mi">45</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">53</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">1350</span> <span class="n">minor</span>
</span><span class='line'>        <span class="mi">49</span><span class="o">%</span> <span class="mi">1327</span><span class="o">/</span><span class="nl">ActivityManager:</span> <span class="mi">12</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">37</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>        <span class="mi">14</span><span class="o">%</span> <span class="mi">1900</span><span class="o">/</span><span class="nl">Binder:</span><span class="mi">1279_7</span><span class="o">:</span> <span class="mi">10</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">4.1</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>        <span class="mi">12</span><span class="o">%</span> <span class="mi">11218</span><span class="o">/</span><span class="nl">Binder:</span><span class="mi">1279_19</span><span class="o">:</span> <span class="mi">10</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">2</span><span class="o">%</span> <span class="n">kernel</span>
</span><span class='line'>       <span class="o">......</span>
</span><span class='line'>    <span class="mi">47</span><span class="o">%</span> <span class="nl">TOTAL:</span> <span class="mi">31</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">15</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">+</span> <span class="mf">0.2</span><span class="o">%</span> <span class="n">softirq</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>&#8195;2. 然后利用traces文件中具体的栈信息，来判断具体的位置和具体的原因。其基本格式和日志如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-----</span> <span class="n">pid</span> <span class="mi">23720</span> <span class="n">at</span> <span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">08</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mi">45</span> <span class="o">-----</span>
</span><span class='line'><span class="n">Cmd</span> <span class="nl">line:</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span>
</span><span class='line'><span class="n">Build</span> <span class="nl">fingerprint:</span> <span class="err">&#39;</span><span class="n">Android</span><span class="o">/</span><span class="n">sdk_phone_x86_64</span><span class="o">/</span><span class="nl">generic_x86_64:</span><span class="mf">8.0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">OSR1</span><span class="o">.</span><span class="mf">180418.004</span><span class="o">/</span><span class="mi">4931640</span><span class="o">:</span><span class="n">userdebug</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="n">keys</span><span class="err">&#39;</span>
</span><span class='line'><span class="nl">ABI:</span> <span class="err">&#39;</span><span class="n">x86_64</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">Build</span> <span class="nl">type:</span> <span class="n">optimized</span>
</span><span class='line'><span class="n">Zygote</span> <span class="n">loaded</span> <span class="n">classes</span><span class="o">=</span><span class="mi">4675</span> <span class="n">post</span> <span class="n">zygote</span> <span class="n">classes</span><span class="o">=</span><span class="mi">217</span>
</span><span class='line'><span class="n">Intern</span> <span class="nl">table:</span> <span class="mi">42644</span> <span class="n">strong</span><span class="o">;</span> <span class="mi">137</span> <span class="n">weak</span>
</span><span class='line'><span class="nl">JNI:</span> <span class="n">CheckJNI</span> <span class="n">is</span> <span class="n">on</span><span class="o">;</span> <span class="n">globals</span><span class="o">=</span><span class="mi">524</span> <span class="o">(</span><span class="n">plus</span> <span class="mi">22</span> <span class="n">weak</span><span class="o">)</span>
</span><span class='line'><span class="nl">Libraries:</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libandroid</span><span class="o">.</span><span class="na">so</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libcompiler_rt</span><span class="o">.</span><span class="na">so</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libjavacrypto</span><span class="o">.</span><span class="na">so</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libjnigraphics</span><span class="o">.</span><span class="na">so</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libmedia_jni</span><span class="o">.</span><span class="na">so</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libsoundpool</span><span class="o">.</span><span class="na">so</span> <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libwebviewchromium_loader</span><span class="o">.</span><span class="na">so</span> <span class="n">libjavacore</span><span class="o">.</span><span class="na">so</span> <span class="n">libopenjdk</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="mi">9</span><span class="o">)</span>
</span><span class='line'><span class="nl">Heap:</span> <span class="mi">67</span><span class="o">%</span> <span class="n">free</span><span class="o">,</span> <span class="mi">725</span><span class="n">KB</span><span class="o">/</span><span class="mi">2</span><span class="n">MB</span><span class="o">;</span> <span class="mi">17739</span> <span class="n">objects</span>
</span><span class='line'><span class="n">Dumping</span> <span class="n">cumulative</span> <span class="n">Gc</span> <span class="n">timings</span>
</span><span class='line'><span class="n">Start</span> <span class="n">Dumping</span> <span class="n">histograms</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">iterations</span> <span class="k">for</span> <span class="n">concurrent</span> <span class="n">copying</span>
</span><span class='line'><span class="nl">ResumeRunnableThreads:</span>    <span class="nl">Sum:</span> <span class="mf">155.370</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">155.370</span><span class="n">ms</span><span class="o">-</span><span class="mf">155.370</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">155.370</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">155.370</span><span class="n">ms</span>
</span><span class='line'><span class="nl">ThreadListFlip:</span>   <span class="nl">Sum:</span> <span class="mf">90.071</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">90.071</span><span class="n">ms</span><span class="o">-</span><span class="mf">90.071</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">90.071</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">90.071</span><span class="n">ms</span>
</span><span class='line'><span class="nl">ProcessMarkStack:</span> <span class="nl">Sum:</span> <span class="mf">30.911</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">30.911</span><span class="n">ms</span><span class="o">-</span><span class="mf">30.911</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">30.911</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">30.911</span><span class="n">ms</span>
</span><span class='line'><span class="nl">SweepSystemWeaks:</span> <span class="nl">Sum:</span> <span class="mf">8.240</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">8.240</span><span class="n">ms</span><span class="o">-</span><span class="mf">8.240</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">8.240</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">8.240</span><span class="n">ms</span>
</span><span class='line'><span class="nl">VisitConcurrentRoots:</span> <span class="nl">Sum:</span> <span class="mf">5.951</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">5.951</span><span class="n">ms</span><span class="o">-</span><span class="mf">5.951</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">5.951</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">5.951</span><span class="n">ms</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="n">concurrent</span> <span class="n">copying</span> <span class="n">total</span> <span class="nl">time:</span> <span class="mf">311.388</span><span class="n">ms</span> <span class="n">mean</span> <span class="nl">time:</span> <span class="mf">311.388</span><span class="n">ms</span>
</span><span class='line'><span class="n">concurrent</span> <span class="n">copying</span> <span class="nl">freed:</span> <span class="mi">5008</span> <span class="n">objects</span> <span class="n">with</span> <span class="n">total</span> <span class="n">size</span> <span class="mi">2</span><span class="n">MB</span>
</span><span class='line'><span class="n">concurrent</span> <span class="n">copying</span> <span class="nl">throughput:</span> <span class="mf">16102.9</span><span class="o">/</span><span class="n">s</span> <span class="o">/</span> <span class="mi">8</span><span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">Cumulative</span> <span class="n">bytes</span> <span class="n">moved</span> <span class="mi">2290824</span>
</span><span class='line'><span class="n">Cumulative</span> <span class="n">objects</span> <span class="n">moved</span> <span class="mi">51583</span>
</span><span class='line'><span class="n">Total</span> <span class="n">time</span> <span class="n">spent</span> <span class="n">in</span> <span class="nl">GC:</span> <span class="mf">311.388</span><span class="n">ms</span>
</span><span class='line'><span class="n">Mean</span> <span class="n">GC</span> <span class="n">size</span> <span class="nl">throughput:</span> <span class="mi">8</span><span class="n">MB</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">Mean</span> <span class="n">GC</span> <span class="n">object</span> <span class="nl">throughput:</span> <span class="mf">16082.8</span> <span class="n">objects</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'><span class="n">Total</span> <span class="n">number</span> <span class="n">of</span> <span class="n">allocations</span> <span class="mi">22747</span>
</span><span class='line'><span class="n">Total</span> <span class="n">bytes</span> <span class="n">allocated</span> <span class="mi">3</span><span class="n">MB</span>
</span><span class='line'><span class="n">Total</span> <span class="n">bytes</span> <span class="n">freed</span> <span class="mi">2</span><span class="n">MB</span>
</span><span class='line'><span class="n">Free</span> <span class="n">memory</span> <span class="mi">1504</span><span class="n">KB</span>
</span><span class='line'><span class="n">Free</span> <span class="n">memory</span> <span class="n">until</span> <span class="n">GC</span> <span class="mi">1504</span><span class="n">KB</span>
</span><span class='line'><span class="n">Free</span> <span class="n">memory</span> <span class="n">until</span> <span class="n">OOME</span> <span class="mi">383</span><span class="n">MB</span>
</span><span class='line'><span class="n">Total</span> <span class="n">memory</span> <span class="mi">2</span><span class="n">MB</span>
</span><span class='line'><span class="n">Max</span> <span class="n">memory</span> <span class="mi">384</span><span class="n">MB</span>
</span><span class='line'><span class="n">Zygote</span> <span class="n">space</span> <span class="n">size</span> <span class="mi">588</span><span class="n">KB</span>
</span><span class='line'><span class="n">Total</span> <span class="n">mutator</span> <span class="n">paused</span> <span class="nl">time:</span> <span class="mi">606</span><span class="n">us</span>
</span><span class='line'><span class="n">Total</span> <span class="n">time</span> <span class="n">waiting</span> <span class="k">for</span> <span class="n">GC</span> <span class="n">to</span> <span class="nl">complete:</span> <span class="mf">131.764</span><span class="n">ms</span>
</span><span class='line'><span class="n">Total</span> <span class="n">GC</span> <span class="nl">count:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Total</span> <span class="n">GC</span> <span class="nl">time:</span> <span class="mf">311.388</span><span class="n">ms</span>
</span><span class='line'><span class="n">Total</span> <span class="n">blocking</span> <span class="n">GC</span> <span class="nl">count:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Total</span> <span class="n">blocking</span> <span class="n">GC</span> <span class="nl">time:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Histogram</span> <span class="n">of</span> <span class="n">GC</span> <span class="n">count</span> <span class="n">per</span> <span class="mi">10000</span> <span class="nl">ms:</span> <span class="mi">0</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'><span class="n">Histogram</span> <span class="n">of</span> <span class="n">blocking</span> <span class="n">GC</span> <span class="n">count</span> <span class="n">per</span> <span class="mi">10000</span> <span class="nl">ms:</span> <span class="mi">0</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'><span class="n">Registered</span> <span class="kd">native</span> <span class="n">bytes</span> <span class="nl">allocated:</span> <span class="mi">3529742</span>
</span><span class='line'><span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">app</span><span class="o">/</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span><span class="o">-</span><span class="mi">2</span><span class="n">XStSJcJb6Nk1a2drTSdOw</span><span class="o">==/</span><span class="n">oat</span><span class="o">/</span><span class="n">x86_64</span><span class="o">/</span><span class="n">base</span><span class="o">.</span><span class="na">odex</span><span class="o">:</span> <span class="n">quicken</span>
</span><span class='line'><span class="n">Current</span> <span class="n">JIT</span> <span class="n">code</span> <span class="n">cache</span> <span class="nl">size:</span> <span class="mi">3</span><span class="n">KB</span>
</span><span class='line'><span class="n">Current</span> <span class="n">JIT</span> <span class="n">data</span> <span class="n">cache</span> <span class="nl">size:</span> <span class="mi">4</span><span class="n">KB</span>
</span><span class='line'><span class="n">Current</span> <span class="n">JIT</span> <span class="nl">capacity:</span> <span class="mi">64</span><span class="n">KB</span>
</span><span class='line'><span class="n">Current</span> <span class="n">number</span> <span class="n">of</span> <span class="n">JIT</span> <span class="n">code</span> <span class="n">cache</span> <span class="nl">entries:</span> <span class="mi">10</span>
</span><span class='line'><span class="n">Total</span> <span class="n">number</span> <span class="n">of</span> <span class="n">JIT</span> <span class="nl">compilations:</span> <span class="mi">10</span>
</span><span class='line'><span class="n">Total</span> <span class="n">number</span> <span class="n">of</span> <span class="n">JIT</span> <span class="n">compilations</span> <span class="k">for</span> <span class="n">on</span> <span class="n">stack</span> <span class="nl">replacement:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Total</span> <span class="n">number</span> <span class="n">of</span> <span class="n">JIT</span> <span class="n">code</span> <span class="n">cache</span> <span class="nl">collections:</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Memory</span> <span class="n">used</span> <span class="k">for</span> <span class="n">stack</span> <span class="nl">maps:</span> <span class="nl">Avg:</span> <span class="mi">124</span><span class="n">B</span> <span class="nl">Max:</span> <span class="mi">344</span><span class="n">B</span> <span class="nl">Min:</span> <span class="mi">24</span><span class="n">B</span>
</span><span class='line'><span class="n">Memory</span> <span class="n">used</span> <span class="k">for</span> <span class="n">compiled</span> <span class="nl">code:</span> <span class="nl">Avg:</span> <span class="mi">357</span><span class="n">B</span> <span class="nl">Max:</span> <span class="mi">1448</span><span class="n">B</span> <span class="nl">Min:</span> <span class="mi">1</span><span class="n">B</span>
</span><span class='line'><span class="n">Memory</span> <span class="n">used</span> <span class="k">for</span> <span class="n">profiling</span> <span class="nl">info:</span> <span class="nl">Avg:</span> <span class="mi">172</span><span class="n">B</span> <span class="nl">Max:</span> <span class="mi">1208</span><span class="n">B</span> <span class="nl">Min:</span> <span class="mi">32</span><span class="n">B</span>
</span><span class='line'><span class="n">Start</span> <span class="n">Dumping</span> <span class="n">histograms</span> <span class="k">for</span> <span class="mi">10</span> <span class="n">iterations</span> <span class="k">for</span> <span class="n">JIT</span> <span class="n">timings</span>
</span><span class='line'><span class="nl">Compiling:</span>    <span class="nl">Sum:</span> <span class="mf">111.851</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">0.084</span><span class="n">ms</span><span class="o">-</span><span class="mf">38.480</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">11.185</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">38.498</span><span class="n">ms</span>
</span><span class='line'><span class="nl">TrimMaps:</span> <span class="nl">Sum:</span> <span class="mf">60.285</span><span class="n">ms</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">0.010</span><span class="n">ms</span><span class="o">-</span><span class="mf">56.279</span><span class="n">ms</span> <span class="nl">Avg:</span> <span class="mf">6.028</span><span class="n">ms</span> <span class="nl">Max:</span> <span class="mf">58.717</span><span class="n">ms</span>
</span><span class='line'><span class="n">Done</span> <span class="n">Dumping</span> <span class="n">histograms</span>
</span><span class='line'><span class="n">Memory</span> <span class="n">used</span> <span class="k">for</span> <span class="nl">compilation:</span> <span class="nl">Avg:</span> <span class="mi">91</span><span class="n">KB</span> <span class="nl">Max:</span> <span class="mi">256</span><span class="n">KB</span> <span class="nl">Min:</span> <span class="mi">15</span><span class="n">KB</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_bytes_written</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_number_of_writes</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_number_of_code_cache_queries</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_number_of_skipped_writes</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_number_of_failed_writes</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_ms_of_sleep</span><span class="o">=</span><span class="mi">5000</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_ms_of_work</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">max_number_profile_entries_cached</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_number_of_hot_spikes</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">ProfileSaver</span> <span class="n">total_number_of_wake_ups</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="n">all</span> <span class="nl">histogram:</span>  <span class="nl">Sum:</span> <span class="mi">189</span><span class="n">us</span> <span class="mi">99</span><span class="o">%</span> <span class="n">C</span><span class="o">.</span><span class="na">I</span><span class="o">.</span> <span class="mf">0.320</span><span class="n">us</span><span class="o">-</span><span class="mi">43</span><span class="n">us</span> <span class="nl">Avg:</span> <span class="mf">23.625</span><span class="n">us</span> <span class="nl">Max:</span> <span class="mi">43</span><span class="n">us</span>
</span><span class='line'><span class="n">DALVIK</span> <span class="nf">THREADS</span> <span class="o">(</span><span class="mi">16</span><span class="o">):</span>
</span><span class='line'><span class="s">&quot;Signal Catcher&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">3</span> <span class="n">Runnable</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">group</span><span class="o">=</span><span class="s">&quot;system&quot;</span> <span class="n">sCount</span><span class="o">=</span><span class="mi">0</span> <span class="n">dsCount</span><span class="o">=</span><span class="mi">0</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span> <span class="n">obj</span><span class="o">=</span><span class="mh">0x14ea5df8</span> <span class="n">self</span><span class="o">=</span><span class="mh">0x7e8c4905c400</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">sysTid</span><span class="o">=</span><span class="mi">23726</span> <span class="n">nice</span><span class="o">=</span><span class="mi">0</span> <span class="n">cgrp</span><span class="o">=</span><span class="k">default</span> <span class="n">sched</span><span class="o">=</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span> <span class="n">handle</span><span class="o">=</span><span class="mh">0x7e8c3fc064f0</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">state</span><span class="o">=</span><span class="n">R</span> <span class="n">schedstat</span><span class="o">=(</span> <span class="mi">5286484</span> <span class="mi">3613279</span> <span class="mi">4</span> <span class="o">)</span> <span class="n">utm</span><span class="o">=</span><span class="mi">0</span> <span class="n">stm</span><span class="o">=</span><span class="mi">0</span> <span class="n">core</span><span class="o">=</span><span class="mi">0</span> <span class="n">HZ</span><span class="o">=</span><span class="mi">100</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">stack</span><span class="o">=</span><span class="mh">0x7e8c3fb0c000</span><span class="o">-</span><span class="mh">0x7e8c3fb0e000</span> <span class="n">stackSize</span><span class="o">=</span><span class="mi">1005</span><span class="n">KB</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">held</span> <span class="n">mutexes</span><span class="o">=</span> <span class="s">&quot;mutator lock&quot;</span><span class="o">(</span><span class="n">shared</span> <span class="n">held</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">00</span> <span class="n">pc</span> <span class="mi">0000000000435</span><span class="n">ca5</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art15DumpNativeStackERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEEiP12BacktraceMapPKcPNS_9ArtMethodEPv</span><span class="o">+</span><span class="mi">213</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">01</span> <span class="n">pc</span> <span class="mi">0000000000515</span><span class="n">b12</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZNK3art6Thread9DumpStackERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEbP12BacktraceMapb</span><span class="o">+</span><span class="mi">322</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">02</span> <span class="n">pc</span> <span class="mi">000000000052</span><span class="n">e56e</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art14DumpCheckpoint3RunEPNS_6ThreadE</span><span class="o">+</span><span class="mi">926</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">03</span> <span class="n">pc</span> <span class="mi">0000000000526399</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art10ThreadList13RunCheckpointEPNS_7ClosureES2_</span><span class="o">+</span><span class="mi">489</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">04</span> <span class="n">pc</span> <span class="mi">0000000000525</span><span class="n">d8b</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art10ThreadList4DumpERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEb</span><span class="o">+</span><span class="mi">747</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">05</span> <span class="n">pc</span> <span class="mi">0000000000525943</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art10ThreadList14DumpForSigQuitERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE</span><span class="o">+</span><span class="mi">867</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">06</span> <span class="n">pc</span> <span class="mi">00000000004</span><span class="n">f7c29</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art7Runtime14DumpForSigQuitERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE</span><span class="o">+</span><span class="mi">201</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">07</span> <span class="n">pc</span> <span class="mi">000000000050228</span><span class="n">e</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art13SignalCatcher13HandleSigQuitEv</span><span class="o">+</span><span class="mi">1790</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">08</span> <span class="n">pc</span> <span class="mi">0000000000500</span><span class="n">fca</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art13SignalCatcher3RunEPv</span><span class="o">+</span><span class="mi">378</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">09</span> <span class="n">pc</span> <span class="mi">000000000007706</span><span class="n">b</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZL15__pthread_startPv</span><span class="o">+</span><span class="mi">27</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">10</span> <span class="n">pc</span> <span class="mi">0000000000028</span><span class="n">aad</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">__start_thread</span><span class="o">+</span><span class="mi">61</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">11</span> <span class="n">pc</span> <span class="mi">0000000000027515</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">__bionic_clone</span><span class="o">+</span><span class="mi">53</span><span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">no</span> <span class="n">managed</span> <span class="n">stack</span> <span class="n">frames</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;main&quot;</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">1</span> <span class="n">Sleeping</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">group</span><span class="o">=</span><span class="s">&quot;main&quot;</span> <span class="n">sCount</span><span class="o">=</span><span class="mi">1</span> <span class="n">dsCount</span><span class="o">=</span><span class="mi">0</span> <span class="n">flags</span><span class="o">=</span><span class="mi">1</span> <span class="n">obj</span><span class="o">=</span><span class="mh">0x73ae4670</span> <span class="n">self</span><span class="o">=</span><span class="mh">0x7e8c490bea00</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">sysTid</span><span class="o">=</span><span class="mi">23720</span> <span class="n">nice</span><span class="o">=-</span><span class="mi">10</span> <span class="n">cgrp</span><span class="o">=</span><span class="k">default</span> <span class="n">sched</span><span class="o">=</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span> <span class="n">handle</span><span class="o">=</span><span class="mh">0x7e8c4df92a08</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">state</span><span class="o">=</span><span class="n">S</span> <span class="n">schedstat</span><span class="o">=(</span> <span class="mi">438163483</span> <span class="mi">342098452</span> <span class="mi">207</span> <span class="o">)</span> <span class="n">utm</span><span class="o">=</span><span class="mi">29</span> <span class="n">stm</span><span class="o">=</span><span class="mi">14</span> <span class="n">core</span><span class="o">=</span><span class="mi">1</span> <span class="n">HZ</span><span class="o">=</span><span class="mi">100</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">stack</span><span class="o">=</span><span class="mh">0x7fffbf9e8000</span><span class="o">-</span><span class="mh">0x7fffbf9ea000</span> <span class="n">stackSize</span><span class="o">=</span><span class="mi">8</span><span class="n">MB</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">held</span> <span class="n">mutexes</span><span class="o">=</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Native</span> <span class="n">method</span><span class="o">)</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">sleeping</span> <span class="n">on</span> <span class="o">&lt;</span><span class="mh">0x03cabe95</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">a</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">373</span><span class="o">)</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">locked</span> <span class="o">&lt;</span><span class="mh">0x03cabe95</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">a</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">314</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">SystemClock</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">SystemClock</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">122</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span><span class="o">.</span><span class="na">MainActivity$1</span><span class="o">.</span><span class="na">onClick</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">77</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">View</span><span class="o">.</span><span class="na">performClick</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6256</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">View$PerformClick</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">24701</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">handleCallback</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">789</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Handler</span><span class="o">.</span><span class="na">dispatchMessage</span><span class="o">(</span><span class="n">Handler</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">98</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">164</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">ActivityThread</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ActivityThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">6541</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Native</span> <span class="n">method</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Zygote$MethodAndArgsCaller</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Zygote</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">240</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">ZygoteInit</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">ZygoteInit</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">767</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;Jit thread pool worker thread 0&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">2</span> <span class="n">Native</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">group</span><span class="o">=</span><span class="s">&quot;main&quot;</span> <span class="n">sCount</span><span class="o">=</span><span class="mi">1</span> <span class="n">dsCount</span><span class="o">=</span><span class="mi">0</span> <span class="n">flags</span><span class="o">=</span><span class="mi">1</span> <span class="n">obj</span><span class="o">=</span><span class="mh">0x14e924b8</span> <span class="n">self</span><span class="o">=</span><span class="mh">0x7e8c3f80e000</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">sysTid</span><span class="o">=</span><span class="mi">23725</span> <span class="n">nice</span><span class="o">=</span><span class="mi">9</span> <span class="n">cgrp</span><span class="o">=</span><span class="k">default</span> <span class="n">sched</span><span class="o">=</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span> <span class="n">handle</span><span class="o">=</span><span class="mh">0x7e8c3fd074f0</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">state</span><span class="o">=</span><span class="n">S</span> <span class="n">schedstat</span><span class="o">=(</span> <span class="mi">17625138</span> <span class="mi">213848019</span> <span class="mi">39</span> <span class="o">)</span> <span class="n">utm</span><span class="o">=</span><span class="mi">0</span> <span class="n">stm</span><span class="o">=</span><span class="mi">1</span> <span class="n">core</span><span class="o">=</span><span class="mi">0</span> <span class="n">HZ</span><span class="o">=</span><span class="mi">100</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">stack</span><span class="o">=</span><span class="mh">0x7e8c3fc09000</span><span class="o">-</span><span class="mh">0x7e8c3fc0b000</span> <span class="n">stackSize</span><span class="o">=</span><span class="mi">1021</span><span class="n">KB</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">held</span> <span class="n">mutexes</span><span class="o">=</span>
</span><span class='line'>  <span class="nl">kernel:</span> <span class="n">futex_wait_queue_me</span><span class="o">+</span><span class="mh">0xdf</span><span class="o">/</span><span class="mh">0x130</span>
</span><span class='line'>  <span class="nl">kernel:</span> <span class="n">futex_wait</span><span class="o">+</span><span class="mh">0x113</span><span class="o">/</span><span class="mh">0x22e</span>
</span><span class='line'>  <span class="nl">kernel:</span> <span class="n">do_futex</span><span class="o">+</span><span class="mh">0xbe</span><span class="o">/</span><span class="mh">0x825</span>
</span><span class='line'>  <span class="nl">kernel:</span> <span class="n">SyS_futex</span><span class="o">+</span><span class="mh">0xbd</span><span class="o">/</span><span class="mh">0x124</span>
</span><span class='line'>  <span class="nl">kernel:</span> <span class="n">system_call_fastpath</span><span class="o">+</span><span class="mh">0x12</span><span class="o">/</span><span class="mh">0x17</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">00</span> <span class="n">pc</span> <span class="mi">00000000000276</span><span class="n">f6</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">syscall</span><span class="o">+</span><span class="mi">22</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">01</span> <span class="n">pc</span> <span class="mi">000000000014</span><span class="n">d38e</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art17ConditionVariable16WaitHoldingLocksEPNS_6ThreadE</span><span class="o">+</span><span class="mi">110</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">02</span> <span class="n">pc</span> <span class="mi">0000000000530012</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art10ThreadPool7GetTaskEPNS_6ThreadE</span><span class="o">+</span><span class="mi">322</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">03</span> <span class="n">pc</span> <span class="mi">000000000052</span><span class="n">f4a1</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art16ThreadPoolWorker3RunEv</span><span class="o">+</span><span class="mi">97</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">04</span> <span class="n">pc</span> <span class="mi">000000000052</span><span class="n">ef53</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libart</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZN3art16ThreadPoolWorker8CallbackEPv</span><span class="o">+</span><span class="mi">131</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">05</span> <span class="n">pc</span> <span class="mi">000000000007706</span><span class="n">b</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">_ZL15__pthread_startPv</span><span class="o">+</span><span class="mi">27</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">06</span> <span class="n">pc</span> <span class="mi">0000000000028</span><span class="n">aad</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">__start_thread</span><span class="o">+</span><span class="mi">61</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">native</span><span class="o">:</span> <span class="err">#</span><span class="mi">07</span> <span class="n">pc</span> <span class="mi">0000000000027515</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">libc</span><span class="o">.</span><span class="na">so</span> <span class="o">(</span><span class="n">__bionic_clone</span><span class="o">+</span><span class="mi">53</span><span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="n">no</span> <span class="n">managed</span> <span class="n">stack</span> <span class="n">frames</span><span class="o">)</span>
</span><span class='line'>  <span class="o">......</span>
</span><span class='line'>  <span class="o">......</span>
</span><span class='line'>    <span class="o">-----</span> <span class="n">end</span> <span class="mi">23720</span> <span class="o">-----</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题来了，这里就会产生几个问题：</p>

<p>&#8195;1. 这些日志是在哪里收集的呢？</p>

<p>&#8195;2. 收集什么信息？如何收集的？</p>

<p>只有弄明白这两个问题，才能更好的理解和处理ANR问题。</p>

<h3>二：ANR日志的收集过程</h3>

<p>当系统发生anr的时候，都会调用的<code>AppErrors</code>的<code>appNotResponding</code>方法，那我们现在慢慢来看这个函数的整个功能。代码有点长，但是不急，我们慢慢来看（代码基本上没有删减，因为我觉得这些代码得一遍一遍的看，当时觉得不重要的，说不定就是挺重要的，删除了就再也看不到了，这是我自己的一个习惯）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">void</span> <span class="nf">appNotResponding</span><span class="o">(</span><span class="n">ProcessRecord</span> <span class="n">app</span><span class="o">,</span> <span class="n">ActivityRecord</span> <span class="n">activity</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ActivityRecord</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aboveSystem</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">annotation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">firstPids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>    <span class="n">SparseArray</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">lastPids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SparseArray</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mService</span><span class="o">.</span><span class="na">mController</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 0 == continue, -1 = kill process immediately</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">mService</span><span class="o">.</span><span class="na">mController</span><span class="o">.</span><span class="na">appEarlyNotResponding</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">,</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span> <span class="o">!=</span> <span class="n">MY_PID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">app</span><span class="o">.</span><span class="na">kill</span><span class="o">(</span><span class="s">&quot;anr&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mService</span><span class="o">.</span><span class="na">mController</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Watchdog</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">setActivityController</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">long</span> <span class="n">anrTime</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">MONITOR_CPU_USAGE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mService</span><span class="o">.</span><span class="na">updateCpuStatsNow</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Unless configured otherwise, swallow ANRs in background processes &amp; kill the process.</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">showBackground</span> <span class="o">=</span> <span class="n">Settings</span><span class="o">.</span><span class="na">Secure</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">mContext</span><span class="o">.</span><span class="na">getContentResolver</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">Settings</span><span class="o">.</span><span class="na">Secure</span><span class="o">.</span><span class="na">ANR_SHOW_BACKGROUND</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">isSilentANR</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// PowerManager.reboot() can block for a long time, so ignore ANRs while shutting down.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mService</span><span class="o">.</span><span class="na">mShuttingDown</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;During shutdown skipping ANR: &quot;</span> <span class="o">+</span> <span class="n">app</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">notResponding</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Skipping duplicate ANR: &quot;</span> <span class="o">+</span> <span class="n">app</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">crashing</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Crashing app skipping ANR: &quot;</span> <span class="o">+</span> <span class="n">app</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">killedByAm</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;App already killed by AM skipping ANR: &quot;</span> <span class="o">+</span> <span class="n">app</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">killed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Skipping died app ANR: &quot;</span> <span class="o">+</span> <span class="n">app</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// In case we come through here for the same app before completing</span>
</span><span class='line'>        <span class="c1">// this one, mark as anring now so we will bail out.</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="na">notResponding</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Log the ANR to the event log.</span>
</span><span class='line'>          <span class="c1">//开始使用EventLog打印ANR的event log</span>
</span><span class='line'>        <span class="n">EventLog</span><span class="o">.</span><span class="na">writeEvent</span><span class="o">(</span><span class="n">EventLogTags</span><span class="o">.</span><span class="na">AM_ANR</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">userId</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">,</span>
</span><span class='line'>                <span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">info</span><span class="o">.</span><span class="na">flags</span><span class="o">,</span> <span class="n">annotation</span><span class="o">);</span>
</span><span class='line'>                  <span class="c1">//把当前的app添加到最先开始收集栈的列表中</span>
</span><span class='line'>        <span class="n">firstPids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果是发生在后台的anr，那么就不收集</span>
</span><span class='line'>        <span class="n">isSilentANR</span> <span class="o">=</span> <span class="o">!</span><span class="n">showBackground</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isInterestingForBackgroundTraces</span><span class="o">(</span><span class="n">app</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isSilentANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">parentPid</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">parent</span><span class="o">.</span><span class="na">app</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">parent</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">pid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">parentPid</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">pid</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">parentPid</span> <span class="o">!=</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">)</span> <span class="n">firstPids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">parentPid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">MY_PID</span> <span class="o">!=</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span> <span class="o">&amp;&amp;</span> <span class="n">MY_PID</span> <span class="o">!=</span> <span class="n">parentPid</span><span class="o">)</span> <span class="n">firstPids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">MY_PID</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">mService</span><span class="o">.</span><span class="na">mLruProcesses</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ProcessRecord</span> <span class="n">r</span> <span class="o">=</span> <span class="n">mService</span><span class="o">.</span><span class="na">mLruProcesses</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">.</span><span class="na">thread</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">pid</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">pid</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pid</span> <span class="o">!=</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span> <span class="o">&amp;&amp;</span> <span class="n">pid</span> <span class="o">!=</span> <span class="n">parentPid</span> <span class="o">&amp;&amp;</span> <span class="n">pid</span> <span class="o">!=</span> <span class="n">MY_PID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">persistent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">firstPids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pid</span><span class="o">);</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Adding persistent proc: &quot;</span> <span class="o">+</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">treatLikeActivity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">firstPids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pid</span><span class="o">);</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Adding likely IME: &quot;</span> <span class="o">+</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">lastPids</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">);</span>
</span><span class='line'>                            <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Adding ANR proc: &quot;</span> <span class="o">+</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Log the ANR to the main log.</span>
</span><span class='line'>      <span class="c1">//这个地方就是向我们的main log中打印ANR日志</span>
</span><span class='line'>      <span class="c1">//注释1</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">info</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">info</span><span class="o">.</span><span class="na">setLength</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;ANR in &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">activity</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">activity</span><span class="o">.</span><span class="na">shortComponentName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; (&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">activity</span><span class="o">.</span><span class="na">shortComponentName</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;PID: &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;Reason: &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">annotation</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">parent</span> <span class="o">!=</span> <span class="n">activity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;Parent: &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">shortComponentName</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ProcessCpuTracker</span> <span class="n">processCpuTracker</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProcessCpuTracker</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// don&#39;t dump native PIDs for background ANRs unless it is the process of interest</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">nativeProcs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isSilentANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NATIVE_STACKS_OF_INTEREST</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">NATIVE_STACKS_OF_INTEREST</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">nativeProcs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="n">app</span><span class="o">.</span><span class="na">processName</span> <span class="o">};</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">nativeProcs</span> <span class="o">=</span> <span class="n">NATIVE_STACKS_OF_INTEREST</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">pids</span> <span class="o">=</span> <span class="n">nativeProcs</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">Process</span><span class="o">.</span><span class="na">getPidsForCommands</span><span class="o">(</span><span class="n">nativeProcs</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nativePids</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">pids</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">nativePids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">pids</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">pids</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nativePids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// For background ANRs, don&#39;t pass the ProcessCpuTracker to</span>
</span><span class='line'>    <span class="c1">// avoid spending 1/2 second collecting stats to rank lastPids.</span>
</span><span class='line'>      <span class="c1">//开始收集发生anr的栈信息到制定的文件中</span>
</span><span class='line'>      <span class="c1">//具体分析看[2.1节的分析]</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">tracesFile</span> <span class="o">=</span> <span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">dumpStackTraces</span><span class="o">(</span>
</span><span class='line'>            <span class="kc">true</span><span class="o">,</span> <span class="n">firstPids</span><span class="o">,</span>
</span><span class='line'>            <span class="o">(</span><span class="n">isSilentANR</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">processCpuTracker</span><span class="o">,</span>
</span><span class='line'>            <span class="o">(</span><span class="n">isSilentANR</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">lastPids</span><span class="o">,</span>
</span><span class='line'>            <span class="n">nativePids</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">cpuInfo</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">MONITOR_CPU_USAGE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mService</span><span class="o">.</span><span class="na">updateCpuStatsNow</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mService</span><span class="o">.</span><span class="na">mProcessCpuTracker</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//这里会打印cpu中的信息</span>
</span><span class='line'>              <span class="c1">//具体看[2.2节分析]</span>
</span><span class='line'>            <span class="n">cpuInfo</span> <span class="o">=</span> <span class="n">mService</span><span class="o">.</span><span class="na">mProcessCpuTracker</span><span class="o">.</span><span class="na">printCurrentState</span><span class="o">(</span><span class="n">anrTime</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">processCpuTracker</span><span class="o">.</span><span class="na">printCurrentLoad</span><span class="o">());</span>
</span><span class='line'>        <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">cpuInfo</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">info</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">processCpuTracker</span><span class="o">.</span><span class="na">printCurrentState</span><span class="o">(</span><span class="n">anrTime</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">info</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">tracesFile</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// There is no trace file, so dump (only) the alleged culprit&#39;s threads to the log</span>
</span><span class='line'>        <span class="n">Process</span><span class="o">.</span><span class="na">sendSignal</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">,</span> <span class="n">Process</span><span class="o">.</span><span class="na">SIGNAL_QUIT</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">StatsLog</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">StatsLog</span><span class="o">.</span><span class="na">ANR_OCCURRED</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">uid</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">,</span>
</span><span class='line'>            <span class="n">activity</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">&quot;unknown&quot;</span><span class="o">:</span> <span class="n">activity</span><span class="o">.</span><span class="na">shortComponentName</span><span class="o">,</span> <span class="n">annotation</span><span class="o">,</span>
</span><span class='line'>            <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">info</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">info</span><span class="o">.</span><span class="na">isInstantApp</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">?</span> <span class="n">StatsLog</span><span class="o">.</span><span class="na">ANROCCURRED__IS_INSTANT_APP__TRUE</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">StatsLog</span><span class="o">.</span><span class="na">ANROCCURRED__IS_INSTANT_APP__FALSE</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">StatsLog</span><span class="o">.</span><span class="na">ANROCCURRED__IS_INSTANT_APP__UNAVAILABLE</span><span class="o">,</span>
</span><span class='line'>            <span class="n">app</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">isInterestingToUserLocked</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">?</span> <span class="n">StatsLog</span><span class="o">.</span><span class="na">ANROCCURRED__FOREGROUND_STATE__FOREGROUND</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">StatsLog</span><span class="o">.</span><span class="na">ANROCCURRED__FOREGROUND_STATE__BACKGROUND</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">:</span> <span class="n">StatsLog</span><span class="o">.</span><span class="na">ANROCCURRED__FOREGROUND_STATE__UNKNOWN</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mService</span><span class="o">.</span><span class="na">addErrorToDropBox</span><span class="o">(</span><span class="s">&quot;anr&quot;</span><span class="o">,</span> <span class="n">app</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">,</span> <span class="n">activity</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="n">annotation</span><span class="o">,</span>
</span><span class='line'>            <span class="n">cpuInfo</span><span class="o">,</span> <span class="n">tracesFile</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mService</span><span class="o">.</span><span class="na">mController</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 0 == show dialog, 1 = keep waiting, -1 = kill process immediately</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">mService</span><span class="o">.</span><span class="na">mController</span><span class="o">.</span><span class="na">appNotResponding</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span><span class="o">,</span> <span class="n">info</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">app</span><span class="o">.</span><span class="na">pid</span> <span class="o">!=</span> <span class="n">MY_PID</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">app</span><span class="o">.</span><span class="na">kill</span><span class="o">(</span><span class="s">&quot;anr&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mService</span><span class="o">.</span><span class="na">mServices</span><span class="o">.</span><span class="na">scheduleServiceTimeoutLocked</span><span class="o">(</span><span class="n">app</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mService</span><span class="o">.</span><span class="na">mController</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Watchdog</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">setActivityController</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mService</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mService</span><span class="o">.</span><span class="na">mBatteryStatsService</span><span class="o">.</span><span class="na">noteProcessAnr</span><span class="o">(</span><span class="n">app</span><span class="o">.</span><span class="na">processName</span><span class="o">,</span> <span class="n">app</span><span class="o">.</span><span class="na">uid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isSilentANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">app</span><span class="o">.</span><span class="na">kill</span><span class="o">(</span><span class="s">&quot;bg anr&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set the app&#39;s notResponding state, and look up the errorReportReceiver</span>
</span><span class='line'>          <span class="c1">//设置app的notResponding状态，并且查找errorreport的接受者</span>
</span><span class='line'>        <span class="n">makeAppNotRespondingLocked</span><span class="o">(</span><span class="n">app</span><span class="o">,</span>
</span><span class='line'>                <span class="n">activity</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">activity</span><span class="o">.</span><span class="na">shortComponentName</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                <span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">&quot;ANR &quot;</span> <span class="o">+</span> <span class="n">annotation</span> <span class="o">:</span> <span class="s">&quot;ANR&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">info</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Bring up the infamous App Not Responding dialog</span>
</span><span class='line'>          <span class="c1">//发送消息弹出一个anr的弹窗</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">Message</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'>        <span class="n">msg</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">SHOW_NOT_RESPONDING_UI_MSG</span><span class="o">;</span>
</span><span class='line'>        <span class="n">msg</span><span class="o">.</span><span class="na">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppNotRespondingDialog</span><span class="o">.</span><span class="na">Data</span><span class="o">(</span><span class="n">app</span><span class="o">,</span> <span class="n">activity</span><span class="o">,</span> <span class="n">aboveSystem</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mService</span><span class="o">.</span><span class="na">mUiHandler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8195;<strong>注释1</strong>：这个地方就是构造了我们main log中的头部最开始的信息，收集了anr发生的进程，主要原因，也就是下面这一段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">08</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mf">46.009</span> <span class="mi">1638</span><span class="o">-</span><span class="mi">1668</span><span class="o">/</span><span class="n">system_process</span> <span class="n">E</span><span class="o">/</span><span class="nl">ActivityManager:</span> <span class="n">ANR</span> <span class="n">in</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span> <span class="o">(</span><span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">lapisy</span><span class="o">.</span><span class="na">apptemplate</span><span class="o">/.</span><span class="na">MainActivity</span><span class="o">)</span>
</span><span class='line'>    <span class="nl">PID:</span> <span class="mi">23720</span>
</span><span class='line'>    <span class="nl">Reason:</span> <span class="n">Input</span> <span class="n">dispatching</span> <span class="n">timed</span> <span class="nf">out</span> <span class="o">(</span><span class="n">Waiting</span> <span class="n">to</span> <span class="n">send</span> <span class="n">non</span><span class="o">-</span><span class="n">key</span> <span class="n">event</span> <span class="n">because</span> <span class="n">the</span> <span class="n">touched</span> <span class="n">window</span> <span class="n">has</span> <span class="n">not</span> <span class="n">finished</span> <span class="n">processing</span> <span class="n">certain</span> <span class="n">input</span> <span class="n">events</span> <span class="n">that</span> <span class="n">were</span> <span class="n">delivered</span> <span class="n">to</span> <span class="n">it</span> <span class="n">over</span> <span class="mf">500.0</span><span class="n">ms</span> <span class="n">ago</span><span class="o">.</span>  <span class="n">Wait</span> <span class="n">queue</span> <span class="nl">length:</span> <span class="mi">6</span><span class="o">.</span>  <span class="n">Wait</span> <span class="n">queue</span> <span class="n">head</span> <span class="nl">age:</span> <span class="mf">5533.6</span><span class="n">ms</span><span class="o">.)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.1 AMS#dumpStackTraces方法</h4>

<p>这个方法主要是手机栈信息，然后把信息写入到制定的文件，全局的文件路径是<code>/data/anr/traces.txt</code>，我们看看他的具体实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * If a stack trace dump file is configured, dump process stack traces.</span>
</span><span class='line'><span class="cm"> * @param clearTraces causes the dump file to be erased prior to the new</span>
</span><span class='line'><span class="cm"> *    traces being written, if true; when false, the new traces will be</span>
</span><span class='line'><span class="cm"> *    appended to any existing file content.</span>
</span><span class='line'><span class="cm"> * @param firstPids of dalvik VM processes to dump stack traces for first</span>
</span><span class='line'><span class="cm"> * @param lastPids of dalvik VM processes to dump stack traces for last</span>
</span><span class='line'><span class="cm"> * @param nativePids optional list of native pids to dump stack crawls</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">File</span> <span class="nf">dumpStackTraces</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">clearTraces</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">firstPids</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ProcessCpuTracker</span> <span class="n">processCpuTracker</span><span class="o">,</span> <span class="n">SparseArray</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">lastPids</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nativePids</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">extraPids</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Measure CPU usage as soon as we&#39;re called in order to get a realistic sampling</span>
</span><span class='line'>    <span class="c1">// of the top users at the time of the request.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">processCpuTracker</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">processCpuTracker</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">processCpuTracker</span><span class="o">.</span><span class="na">update</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We&#39;ll take the stack crawls of just the top apps using CPU.</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="n">processCpuTracker</span><span class="o">.</span><span class="na">countWorkingStats</span><span class="o">();</span>
</span><span class='line'>        <span class="n">extraPids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">&amp;&amp;</span> <span class="n">extraPids</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ProcessCpuTracker</span><span class="o">.</span><span class="na">Stats</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">processCpuTracker</span><span class="o">.</span><span class="na">getWorkingStats</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">lastPids</span><span class="o">.</span><span class="na">indexOfKey</span><span class="o">(</span><span class="n">stats</span><span class="o">.</span><span class="na">pid</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Collecting stacks for extra pid &quot;</span> <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">pid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">extraPids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stats</span><span class="o">.</span><span class="na">pid</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Skipping next CPU consuming process, not a java proc: &quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">stats</span><span class="o">.</span><span class="na">pid</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">useTombstonedForJavaTraces</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">tracesFile</span><span class="o">;</span>
</span><span class='line'>          <span class="c1">//判断系统是否配置了存放anr日志的目录，默认情况下是没有配置的,华为手机默认配置为：/data/anr</span>
</span><span class='line'>      <span class="c1">//可以使用反射，自己来测试这些值</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">tracesDirProp</span> <span class="o">=</span> <span class="n">SystemProperties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;dalvik.vm.stack-trace-dir&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">tracesDirProp</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// When dalvik.vm.stack-trace-dir is not set, we are using the &quot;old&quot; trace</span>
</span><span class='line'>        <span class="c1">// dumping scheme. All traces are written to a global trace file (usually</span>
</span><span class='line'>        <span class="c1">// &quot;/data/anr/traces.txt&quot;) so the code below must take care to unlink and recreate</span>
</span><span class='line'>        <span class="c1">// the file if requested.</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// This mode of operation will be removed in the near future.</span>
</span><span class='line'>
</span><span class='line'>                  <span class="c1">//得到的是系统默认存放anr日志的路径，默认为/data/anr/trace.txt</span>
</span><span class='line'>          <span class="c1">//可以使用反射，自己来测试</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">globalTracesPath</span> <span class="o">=</span> <span class="n">SystemProperties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;dalvik.vm.stack-trace-file&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">globalTracesPath</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;dumpStackTraces: no trace path configured&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>                  <span class="c1">//创建文件</span>
</span><span class='line'>        <span class="n">tracesFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">globalTracesPath</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//是否清空原来的文件，默认anr情况下clearTraces为true，清空</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">clearTraces</span> <span class="o">&amp;&amp;</span> <span class="n">tracesFile</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">tracesFile</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tracesFile</span><span class="o">.</span><span class="na">createNewFile</span><span class="o">();</span>
</span><span class='line'>            <span class="n">FileUtils</span><span class="o">.</span><span class="na">setPermissions</span><span class="o">(</span><span class="n">globalTracesPath</span><span class="o">,</span> <span class="mi">0666</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// -rw-rw-rw-</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Unable to prepare ANR traces file: &quot;</span> <span class="o">+</span> <span class="n">tracesFile</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">tracesDir</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">tracesDirProp</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// When dalvik.vm.stack-trace-dir is set, we use the &quot;new&quot; trace dumping scheme.</span>
</span><span class='line'>        <span class="c1">// Each set of ANR traces is written to a separate file and dumpstate will process</span>
</span><span class='line'>        <span class="c1">// all such files and add them to a captured bug report if they&#39;re recent enough.</span>
</span><span class='line'>        <span class="n">maybePruneOldTraces</span><span class="o">(</span><span class="n">tracesDir</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// NOTE: We should consider creating the file in native code atomically once we&#39;ve</span>
</span><span class='line'>        <span class="c1">// gotten rid of the old scheme of dumping and lot of the code that deals with paths</span>
</span><span class='line'>        <span class="c1">// can be removed.</span>
</span><span class='line'>        <span class="n">tracesFile</span> <span class="o">=</span> <span class="n">createAnrDumpFile</span><span class="o">(</span><span class="n">tracesDir</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">tracesFile</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">useTombstonedForJavaTraces</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dumpStackTraces</span><span class="o">(</span><span class="n">tracesFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">(),</span> <span class="n">firstPids</span><span class="o">,</span> <span class="n">nativePids</span><span class="o">,</span> <span class="n">extraPids</span><span class="o">,</span>
</span><span class='line'>            <span class="n">useTombstonedForJavaTraces</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tracesFile</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是系统配置了<code>dalvik.vm.stack-trace-dir</code>这个属性，则表示使用tombstone的方式来dump日志，那么这种方式下，创建文件的方式是不一样的，我们看<code>createAnrDumpFile</code>方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">File</span> <span class="nf">createAnrDumpFile</span><span class="o">(</span><span class="n">File</span> <span class="n">tracesDir</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">sAnrFileDateFormat</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sAnrFileDateFormat</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd-HH-mm-ss-SSS&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">formattedDate</span> <span class="o">=</span> <span class="n">sAnrFileDateFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//tracesDir，模拟器没有配置，华为手机配置为/data/anr</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">File</span> <span class="n">anrFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">tracesDir</span><span class="o">,</span> <span class="s">&quot;anr_&quot;</span> <span class="o">+</span> <span class="n">formattedDate</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">anrFile</span><span class="o">.</span><span class="na">createNewFile</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">FileUtils</span><span class="o">.</span><span class="na">setPermissions</span><span class="o">(</span><span class="n">anrFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">(),</span> <span class="mi">0600</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// -rw-------</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">anrFile</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Unable to create ANR dump file: createNewFile failed&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Exception creating ANR dump file:&quot;</span><span class="o">,</span> <span class="n">ioe</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面可以看出，如果配置了<code>dalvik.vm.stack-trace-dir</code>，则存储anr栈信息的文件名称为变为了</p>

<p><strong>tracesDir+&ldquo;anr_&rdquo;+&ldquo;yyyy-MM-dd-HH-mm-ss-SSS&rdquo;</strong>这种命名风格，华为的手机默认就是这种。</p>

<p>进一步调用AMS的dumpStackTraces方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dumpStackTraces</span><span class="o">(</span><span class="n">String</span> <span class="n">tracesFile</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">firstPids</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nativePids</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">extraPids</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">useTombstonedForJavaTraces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We don&#39;t need any sort of inotify based monitoring when we&#39;re dumping traces via</span>
</span><span class='line'>    <span class="c1">// tombstoned. Data is piped to an &quot;intercept&quot; FD installed in tombstoned so we&#39;re in full</span>
</span><span class='line'>    <span class="c1">// control of all writes to the file in question.</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">DumpStackFileObserver</span> <span class="n">observer</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">useTombstonedForJavaTraces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">observer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Use a FileObserver to detect when traces finish writing.</span>
</span><span class='line'>        <span class="c1">// The order of traces is considered important to maintain for legibility.</span>
</span><span class='line'>        <span class="n">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DumpStackFileObserver</span><span class="o">(</span><span class="n">tracesFile</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//我们必须在20s内完成dump stacks的信息</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">remainingTime</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//利用FileObserver来监听/anr/data/traces.txt目录</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">observer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">observer</span><span class="o">.</span><span class="na">startWatching</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// First collect all of the stacks of the most important pids.</span>
</span><span class='line'>          <span class="c1">//首先收集最重要pids的栈信息,一般就是直接导致anr的进程，开发中就是我们自己应用的进程</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">firstPids</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">firstPids</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Collecting stacks for pid &quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">firstPids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">long</span> <span class="n">timeTaken</span><span class="o">;</span>
</span><span class='line'>                  <span class="c1">//是否使用tombstone来记录java的堆栈信息</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">useTombstonedForJavaTraces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">timeTaken</span> <span class="o">=</span> <span class="n">dumpJavaTracesTombstoned</span><span class="o">(</span><span class="n">firstPids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">tracesFile</span><span class="o">,</span> <span class="n">remainingTime</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">timeTaken</span> <span class="o">=</span> <span class="n">observer</span><span class="o">.</span><span class="na">dumpWithTimeout</span><span class="o">(</span><span class="n">firstPids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">remainingTime</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">remainingTime</span> <span class="o">-=</span> <span class="n">timeTaken</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">remainingTime</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Aborting stack trace dump (current firstPid=&quot;</span> <span class="o">+</span> <span class="n">firstPids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span>
</span><span class='line'>                        <span class="s">&quot;); deadline exceeded.&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Done with pid &quot;</span> <span class="o">+</span> <span class="n">firstPids</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; in &quot;</span> <span class="o">+</span> <span class="n">timeTaken</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Next collect the stacks of the native pids</span>
</span><span class='line'>          <span class="c1">//如果20s时间还有剩余，那么继续收集那些native进程的堆栈信息</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nativePids</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">pid</span> <span class="o">:</span> <span class="n">nativePids</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Collecting stacks for native pid &quot;</span> <span class="o">+</span> <span class="n">pid</span><span class="o">);</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">long</span> <span class="n">nativeDumpTimeoutMs</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">NATIVE_DUMP_TIMEOUT_MS</span><span class="o">,</span> <span class="n">remainingTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">();</span>
</span><span class='line'>                <span class="n">Debug</span><span class="o">.</span><span class="na">dumpNativeBacktraceToFileTimeout</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">pid</span><span class="o">,</span> <span class="n">tracesFile</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">nativeDumpTimeoutMs</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">));</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">long</span> <span class="n">timeTaken</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">remainingTime</span> <span class="o">-=</span> <span class="n">timeTaken</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">remainingTime</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Aborting stack trace dump (current native pid=&quot;</span> <span class="o">+</span> <span class="n">pid</span> <span class="o">+</span>
</span><span class='line'>                        <span class="s">&quot;); deadline exceeded.&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Done with native pid &quot;</span> <span class="o">+</span> <span class="n">pid</span> <span class="o">+</span> <span class="s">&quot; in &quot;</span> <span class="o">+</span> <span class="n">timeTaken</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//最后，如果20s的时间还有剩余，那么收集cpu tracker中所有的其他pid的栈信息</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">extraPids</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">pid</span> <span class="o">:</span> <span class="n">extraPids</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Collecting stacks for extra pid &quot;</span> <span class="o">+</span> <span class="n">pid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">long</span> <span class="n">timeTaken</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">useTombstonedForJavaTraces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">timeTaken</span> <span class="o">=</span> <span class="n">dumpJavaTracesTombstoned</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">tracesFile</span><span class="o">,</span> <span class="n">remainingTime</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">timeTaken</span> <span class="o">=</span> <span class="n">observer</span><span class="o">.</span><span class="na">dumpWithTimeout</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">remainingTime</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">remainingTime</span> <span class="o">-=</span> <span class="n">timeTaken</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">remainingTime</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Aborting stack trace dump (current extra pid=&quot;</span> <span class="o">+</span> <span class="n">pid</span> <span class="o">+</span>
</span><span class='line'>                            <span class="s">&quot;); deadline exceeded.&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG_ANR</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Done with extra pid &quot;</span> <span class="o">+</span> <span class="n">pid</span> <span class="o">+</span> <span class="s">&quot; in &quot;</span> <span class="o">+</span> <span class="n">timeTaken</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">observer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//停止监听文件夹</span>
</span><span class='line'>            <span class="n">observer</span><span class="o">.</span><span class="na">stopWatching</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里有两种不走来获取进程stack</p>

<p>&#8195;1. 使用DumpStackFileObserver的dumpWithTimeout方法来获取堆栈信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">public</span> <span class="kt">long</span> <span class="nf">dumpWithTimeout</span><span class="o">(</span><span class="kt">int</span> <span class="n">pid</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//发送一个SIGNAL_QUIT信号，开始获取堆栈信息</span>
</span><span class='line'>          <span class="c1">//等效于adb shell kill -3 pid</span>
</span><span class='line'>        <span class="n">sendSignal</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">SIGNAL_QUIT</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">();</span>
</span><span class='line'>                  <span class="c1">//timeout传进来的值，最大的为20s，TRACE_DUMP_TIMEOUT_MS默认值为10s</span>
</span><span class='line'>          <span class="c1">//等待大概10s钟</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">long</span> <span class="n">waitTime</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">timeout</span><span class="o">,</span> <span class="n">TRACE_DUMP_TIMEOUT_MS</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">wait</span><span class="o">(</span><span class="n">waitTime</span><span class="o">);</span> <span class="c1">// Wait for traces file to be closed.</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Slog</span><span class="o">.</span><span class="na">wtf</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// This avoids a corner case of passing a negative time to the native</span>
</span><span class='line'>        <span class="c1">// trace in case we&#39;ve already hit the overall timeout.</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">long</span> <span class="n">timeWaited</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">timeWaited</span> <span class="o">&gt;=</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">timeWaited</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>          <span class="c1">//public synchronized void onEvent(int event, String path) {</span>
</span><span class='line'>        <span class="c1">//   mClosed = true;</span>
</span><span class='line'>        <span class="c1">//   notify();</span>
</span><span class='line'>          <span class="c1">//}</span>
</span><span class='line'>                  <span class="c1">//mclosed值在监视的onEvent方法里置位true，然后条用notify方法,通知不用等待</span>
</span><span class='line'>          <span class="c1">//如果等待了timeWaited时间后，anr的traces.txt文件还没有生成，则开始尝试dump</span>
</span><span class='line'>          <span class="c1">//native stack的信息</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mClosed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Didn&#39;t see close of &quot;</span> <span class="o">+</span> <span class="n">mTracesPath</span> <span class="o">+</span> <span class="s">&quot; for pid &quot;</span> <span class="o">+</span> <span class="n">pid</span> <span class="o">+</span>
</span><span class='line'>                   <span class="s">&quot;. Attempting native stack collection.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">long</span> <span class="n">nativeDumpTimeoutMs</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">NATIVE_DUMP_TIMEOUT_MS</span><span class="o">,</span> <span class="n">timeout</span> <span class="o">-</span> <span class="n">timeWaited</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Debug</span><span class="o">.</span><span class="na">dumpNativeBacktraceToFileTimeout</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">mTracesPath</span><span class="o">,</span>
</span><span class='line'>                    <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">nativeDumpTimeoutMs</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mClosed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8195;2. 利用AMS的dumpJavaTracesTombstoned方法来获取日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Dump java traces for process {@code pid} to the specified file. If java trace dumping</span>
</span><span class='line'><span class="cm"> * fails, a native backtrace is attempted. Note that the timeout {@code timeoutMs} only applies</span>
</span><span class='line'><span class="cm"> * to the java section of the trace, a further {@code NATIVE_DUMP_TIMEOUT_MS} might be spent</span>
</span><span class='line'><span class="cm"> * attempting to obtain native traces in the case of a failure. Returns the total time spent</span>
</span><span class='line'><span class="cm"> * capturing traces.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">dumpJavaTracesTombstoned</span><span class="o">(</span><span class="kt">int</span> <span class="n">pid</span><span class="o">,</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeoutMs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">long</span> <span class="n">timeStart</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">Debug</span><span class="o">.</span><span class="na">dumpJavaBacktraceToFileTimeout</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">fileName</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">timeoutMs</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Debug</span><span class="o">.</span><span class="na">dumpNativeBacktraceToFileTimeout</span><span class="o">(</span><span class="n">pid</span><span class="o">,</span> <span class="n">fileName</span><span class="o">,</span>
</span><span class='line'>                <span class="o">(</span><span class="n">NATIVE_DUMP_TIMEOUT_MS</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">elapsedRealtime</span><span class="o">()</span> <span class="o">-</span> <span class="n">timeStart</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的逻辑主要还是两部分：</p>

<p>&#8195;1. 使用Debug的dumpJavaBacktraceToFileTimeout方法来dump对应pid的栈信息，如果dump失败，则执行2步</p>

<p>&#8195;2. 在第一步失败后，尝试调用Debug的dumpNativeBacktraceToFileTimeout方法来dump信息，尝试的最大时间为2s</p>

<p>这个方法还是利用Debug类中的dumpNativeBacktraceToFileTimeout这个native方法去获取native stack的信息，并追加到我们的记录anr的日志文件后面，这个方法的具体定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Append the native stack traces of a given process to a specified file.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param pid pid to dump.</span>
</span><span class='line'><span class="cm"> * @param file path of file to append dump to.</span>
</span><span class='line'><span class="cm"> * @param timeoutSecs time to wait in seconds, or 0 to wait forever.</span>
</span><span class='line'><span class="cm"> * @hide</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">dumpNativeBacktraceToFileTimeout</span><span class="o">(</span><span class="kt">int</span> <span class="n">pid</span><span class="o">,</span> <span class="n">String</span> <span class="n">file</span><span class="o">,</span>
</span><span class='line'>                                                              <span class="kt">int</span> <span class="n">timeoutSecs</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>dump栈信息总结</h4>

<p>在dump栈信息的时候，过程分为：</p>

<p>&#8195;1. 首先判断系统是否配置<code>dalvik.vm.stack-trace-dir</code>属性，如果没有配置，则利用FileObserver来监听全局默认的路径，也就是<code>/data/anr/traces.txt</code>，当发生anr时，会发送<strong>SIGNAL_QUIT</strong>信号，相当于执行了<code>adb shell kill -3 pid</code>，通知系统开始收集Java栈信息，然后写入到全局路径中。如果dump Java栈信息失败，则尝试通过Debug来dump native进程的栈信息，尝试的时间为2s。</p>

<p>&#8195;2. 如果系统配置了<code>dalvik.vm.stack-trace-dir</code>属性，则会标志位useTombstonedForJavaTraces为true，表示使用Debug.dumpJavaBacktraceToFileTimeout方法来dump Java堆栈的信息。</p>

<p>&#8195; 3. 如果上两个步骤完成后，20s钟时间还剩余，则开始dump 一些不是非常重要的native进程的堆栈信息</p>

<p>&#8195; 4. 如果上面三个步骤完后后，20s钟时间还剩余，则开始dump  cpu tracker中所有的其他pid的栈信息(更加的底层)。</p>

<h4>2.2 ProcessCpuTracker cpu信息的收集</h4>

<p>主要是使用<code>printCurrentState</code>方法来收集每个进程的cpu的使用情况。具体看<strong><code>printCurrentState</code></strong>方法实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">final</span> <span class="kd">public</span> <span class="n">String</span> <span class="nf">printCurrentState</span><span class="o">(</span><span class="kt">long</span> <span class="n">now</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SimpleDateFormat</span> <span class="n">sdf</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">buildWorkingProcs</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FastPrintWriter</span><span class="o">(</span><span class="n">sw</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="mi">1024</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//信息的头部</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;CPU usage from &quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">//判断是ANR前，还是ANR后</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">now</span> <span class="o">&gt;</span> <span class="n">mLastSampleTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">now</span><span class="o">-</span><span class="n">mLastSampleTime</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;ms to &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">now</span><span class="o">-</span><span class="n">mCurrentSampleTime</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;ms ago&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">mLastSampleTime</span><span class="o">-</span><span class="n">now</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;ms to &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">mCurrentSampleTime</span><span class="o">-</span><span class="n">now</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;ms later&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; (&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">mLastSampleWallTime</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; to &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sdf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">mCurrentSampleWallTime</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">long</span> <span class="n">sampleTime</span> <span class="o">=</span> <span class="n">mCurrentSampleTime</span> <span class="o">-</span> <span class="n">mLastSampleTime</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">sampleRealTime</span> <span class="o">=</span> <span class="n">mCurrentSampleRealTime</span> <span class="o">-</span> <span class="n">mLastSampleRealTime</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">percAwake</span> <span class="o">=</span> <span class="n">sampleRealTime</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">((</span><span class="n">sampleTime</span><span class="o">*</span><span class="mi">100</span><span class="o">)</span> <span class="o">/</span> <span class="n">sampleRealTime</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">percAwake</span> <span class="o">!=</span> <span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; with &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">percAwake</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% awake&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">totalTime</span> <span class="o">=</span> <span class="n">mRelUserTime</span> <span class="o">+</span> <span class="n">mRelSystemTime</span> <span class="o">+</span> <span class="n">mRelIoWaitTime</span>
</span><span class='line'>                <span class="o">+</span> <span class="n">mRelIrqTime</span> <span class="o">+</span> <span class="n">mRelSoftIrqTime</span> <span class="o">+</span> <span class="n">mRelIdleTime</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG</span><span class="o">)</span> <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;totalTime &quot;</span> <span class="o">+</span> <span class="n">totalTime</span> <span class="o">+</span> <span class="s">&quot; over sample time &quot;</span>
</span><span class='line'>                <span class="o">+</span> <span class="o">(</span><span class="n">mCurrentSampleTime</span><span class="o">-</span><span class="n">mLastSampleTime</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="n">mWorkingProcs</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Stats</span> <span class="n">st</span> <span class="o">=</span> <span class="n">mWorkingProcs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">printProcessCPU</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">st</span><span class="o">.</span><span class="na">added</span> <span class="o">?</span> <span class="s">&quot; +&quot;</span> <span class="o">:</span> <span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">removed</span> <span class="o">?</span> <span class="s">&quot; -&quot;</span><span class="o">:</span> <span class="s">&quot;  &quot;</span><span class="o">),</span>
</span><span class='line'>                    <span class="n">st</span><span class="o">.</span><span class="na">pid</span><span class="o">,</span> <span class="n">st</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">st</span><span class="o">.</span><span class="na">rel_uptime</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">st</span><span class="o">.</span><span class="na">rel_utime</span><span class="o">,</span> <span class="n">st</span><span class="o">.</span><span class="na">rel_stime</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">st</span><span class="o">.</span><span class="na">rel_minfaults</span><span class="o">,</span> <span class="n">st</span><span class="o">.</span><span class="na">rel_majfaults</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">st</span><span class="o">.</span><span class="na">removed</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="o">.</span><span class="na">workingThreads</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">M</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">workingThreads</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">M</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Stats</span> <span class="n">tst</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">workingThreads</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
</span><span class='line'>                  <span class="c1">//打印每个进程的信息</span>
</span><span class='line'>                    <span class="n">printProcessCPU</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">tst</span><span class="o">.</span><span class="na">added</span> <span class="o">?</span> <span class="s">&quot;   +&quot;</span> <span class="o">:</span> <span class="o">(</span><span class="n">tst</span><span class="o">.</span><span class="na">removed</span> <span class="o">?</span> <span class="s">&quot;   -&quot;</span><span class="o">:</span> <span class="s">&quot;    &quot;</span><span class="o">),</span>
</span><span class='line'>                            <span class="n">tst</span><span class="o">.</span><span class="na">pid</span><span class="o">,</span> <span class="n">tst</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">st</span><span class="o">.</span><span class="na">rel_uptime</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">tst</span><span class="o">.</span><span class="na">rel_utime</span><span class="o">,</span> <span class="n">tst</span><span class="o">.</span><span class="na">rel_stime</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>              <span class="c1">//答应total的信息，格式47% TOTAL: 31% user + 15% kernel + 0.2% softirq</span>
</span><span class='line'>        <span class="n">printProcessCPU</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;TOTAL&quot;</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">,</span> <span class="n">mRelUserTime</span><span class="o">,</span> <span class="n">mRelSystemTime</span><span class="o">,</span>
</span><span class='line'>                <span class="n">mRelIoWaitTime</span><span class="o">,</span> <span class="n">mRelIrqTime</span><span class="o">,</span> <span class="n">mRelSoftIrqTime</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">printProcessCPU</span><span class="o">(</span><span class="n">PrintWriter</span> <span class="n">pw</span><span class="o">,</span> <span class="n">String</span> <span class="n">prefix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pid</span><span class="o">,</span> <span class="n">String</span> <span class="n">label</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">totalTime</span><span class="o">,</span> <span class="kt">int</span> <span class="n">user</span><span class="o">,</span> <span class="kt">int</span> <span class="n">system</span><span class="o">,</span> <span class="kt">int</span> <span class="n">iowait</span><span class="o">,</span> <span class="kt">int</span> <span class="n">irq</span><span class="o">,</span> <span class="kt">int</span> <span class="n">softIrq</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">minFaults</span><span class="o">,</span> <span class="kt">int</span> <span class="n">majFaults</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">prefix</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">totalTime</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">totalTime</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">printRatio</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">user</span><span class="o">+</span><span class="n">system</span><span class="o">+</span><span class="n">iowait</span><span class="o">+</span><span class="n">irq</span><span class="o">+</span><span class="n">softIrq</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">pid</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">pid</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">label</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;: &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">printRatio</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">user</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% user + &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">printRatio</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">system</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% kernel&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">iowait</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; + &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">printRatio</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">iowait</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% iowait&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">irq</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; + &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">printRatio</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">irq</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% irq&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>          <span class="c1">//https://www.kernel.org/doc/htmldocs/kernel-hacking/basics-softirqs.html</span>
</span><span class='line'>          <span class="c1">//softirq </span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">softIrq</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; + &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">printRatio</span><span class="o">(</span><span class="n">pw</span><span class="o">,</span> <span class="n">softIrq</span><span class="o">,</span> <span class="n">totalTime</span><span class="o">);</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;% softirq&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">minFaults</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">majFaults</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; / faults:&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">minFaults</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">minFaults</span><span class="o">);</span>
</span><span class='line'>                <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; minor&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">majFaults</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">majFaults</span><span class="o">);</span>
</span><span class='line'>                <span class="n">pw</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot; major&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法就是打印每个进程，使用cpu的情况，完整的格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CPU</span> <span class="n">usage</span> <span class="n">from</span> <span class="mi">839843</span><span class="n">ms</span> <span class="n">to</span> <span class="mi">0</span><span class="n">ms</span> <span class="nf">ago</span> <span class="o">(</span><span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">18</span> <span class="mi">18</span><span class="o">:</span><span class="mi">35</span><span class="o">:</span><span class="mf">53.827</span> <span class="n">to</span> <span class="mi">2019</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">30</span> <span class="mi">08</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span><span class="mf">44.991</span><span class="o">):</span>
</span><span class='line'>      <span class="mf">4.5</span><span class="o">%</span> <span class="mi">1638</span><span class="o">/</span><span class="nl">system_server:</span> <span class="mi">3</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">1.4</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">22176</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">2.2</span><span class="o">%</span> <span class="mi">1387</span><span class="o">/</span><span class="nl">adbd:</span> <span class="mf">0.2</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mi">2</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">49043</span> <span class="n">minor</span>
</span><span class='line'>      <span class="mf">0.8</span><span class="o">%</span> <span class="mi">1401</span><span class="o">/</span><span class="n">android</span><span class="o">.</span><span class="na">hardware</span><span class="o">.</span><span class="na">graphics</span><span class="o">.</span><span class="na">composer</span><span class="err">@</span><span class="mf">2.1</span><span class="o">-</span><span class="nl">service:</span> <span class="mi">0</span><span class="o">%</span> <span class="n">user</span> <span class="o">+</span> <span class="mf">0.7</span><span class="o">%</span> <span class="n">kernel</span> <span class="o">/</span> <span class="nl">faults:</span> <span class="mi">18</span> <span class="n">minor</span>
</span><span class='line'>      <span class="o">......</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意这里有一个<strong>softirq</strong>的耗时的统计，那这个是什么呢？这个softirq是表示软中断的意思，主要是Linux 系统内核里面的程序，具体可以查看<a href="https://www.kernel.org/doc/htmldocs/kernel-hacking/basics-softirqs.html">https://www.kernel.org/doc/htmldocs/kernel-hacking/basics-softirqs.html</a></p></blockquote>

<p><a href="https://www.cnblogs.com/CoderTian/p/5980426.html"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android系统之Watchdog学习解析]]></title>
    <link href="http://blog.lapisy.com/blog/2019/04/23/androidxi-tong-zhi-watchdogxue-xi-jie-xi/"/>
    <updated>2019-04-23T22:56:45+08:00</updated>
    <id>http://blog.lapisy.com/blog/2019/04/23/androidxi-tong-zhi-watchdogxue-xi-jie-xi</id>
    <content type="html"><![CDATA[<h3>一：概述</h3>

<p>Watchdog 顾名思义，看门狗，是一个很重要的机制，其目的是监测系统或者硬件的运行的情况，一旦出现锁死，死机的情况，能及时重启机器（取决于每种实现的设置策略），并收集dump crash日志.</p>

<p>一般情况下有硬件层的Watchdog，也有软件层的Watchdog，例如Linux内核watchdog。但是无论其实现怎么样，但其基本思路包括：</p>

<p>1.假定某一个对象的状态能表征系统运行是否健康（比如interrupt的次数，比如/dev/watchdog的时间戳）;</p>

<p>2.启动一个watchdog程序，定期（通过内部或者外部时钟触发）来观测这个对象，来判定系统是否健康，并采取相应动作。</p>

<h3>二：Android系统中的Watchdog机制</h3>

<p>Android设计了一个软件层面Watchdog，用于保护一些重要的系统服务，当出现故障时，通常会让Android系统重启。由于这种机制的存在，就经常会出现一些system_server进程被Watchdog杀掉而发生手机重启的问题。</p>

<p>所以在Android的Watchdog机制中，我需要弄明白几个问题：</p>

<p>1.Watchdog监视什么？</p>

<p>2.Watchdog如何监视的，也就是判断的条件？</p>

<p>3.Watchdog监视的条件出现问题时，会进行那些操作？</p>

<!--more-->


<h4>2.1 Watchdog初始化</h4>

<p>Android中的Watchdog是单例的线程，他在SystemServer初始化的时候启动，并初始化，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">traceBeginAndSlog</span><span class="o">(</span><span class="s">&quot;InitWatchdog&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Watchdog</span> <span class="n">watchdog</span> <span class="o">=</span> <span class="n">Watchdog</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'><span class="n">watchdog</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">mActivityManagerService</span><span class="o">);</span>
</span><span class='line'><span class="n">traceEnd</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的主要原理就是获取Watchdog对象，并调用他的<code>init</code>方法，初始化。我们来看Watchdog的构造函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="nf">Watchdog</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="s">&quot;watchdog&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mMonitorChecker</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HandlerChecker</span><span class="o">(</span><span class="n">FgThread</span><span class="o">.</span><span class="na">getHandler</span><span class="o">(),</span>
</span><span class='line'>            <span class="s">&quot;foreground thread&quot;</span><span class="o">,</span> <span class="n">DEFAULT_TIMEOUT</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mMonitorChecker</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Add checker for main thread.  We only do a quick check since there</span>
</span><span class='line'>    <span class="c1">// can be UI running on the thread.</span>
</span><span class='line'>    <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">HandlerChecker</span><span class="o">(</span><span class="k">new</span> <span class="nf">Handler</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">getMainLooper</span><span class="o">()),</span>
</span><span class='line'>            <span class="s">&quot;main thread&quot;</span><span class="o">,</span> <span class="n">DEFAULT_TIMEOUT</span><span class="o">));</span>
</span><span class='line'>    <span class="c1">// Add checker for shared UI thread.</span>
</span><span class='line'>    <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">HandlerChecker</span><span class="o">(</span><span class="n">UiThread</span><span class="o">.</span><span class="na">getHandler</span><span class="o">(),</span>
</span><span class='line'>            <span class="s">&quot;ui thread&quot;</span><span class="o">,</span> <span class="n">DEFAULT_TIMEOUT</span><span class="o">));</span>
</span><span class='line'>    <span class="c1">// And also check IO thread.</span>
</span><span class='line'>    <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">HandlerChecker</span><span class="o">(</span><span class="n">IoThread</span><span class="o">.</span><span class="na">getHandler</span><span class="o">(),</span>
</span><span class='line'>            <span class="s">&quot;i/o thread&quot;</span><span class="o">,</span> <span class="n">DEFAULT_TIMEOUT</span><span class="o">));</span>
</span><span class='line'>    <span class="c1">// And the display thread.</span>
</span><span class='line'>    <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">HandlerChecker</span><span class="o">(</span><span class="n">DisplayThread</span><span class="o">.</span><span class="na">getHandler</span><span class="o">(),</span>
</span><span class='line'>            <span class="s">&quot;display thread&quot;</span><span class="o">,</span> <span class="n">DEFAULT_TIMEOUT</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize monitor for Binder threads.</span>
</span><span class='line'>    <span class="n">addMonitor</span><span class="o">(</span><span class="k">new</span> <span class="nf">BinderThreadMonitor</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mOpenFdMonitor</span> <span class="o">=</span> <span class="n">OpenFdMonitor</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// See the notes on DEFAULT_TIMEOUT.</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">DB</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">DEFAULT_TIMEOUT</span> <span class="o">&gt;</span> <span class="n">ZygoteConnectionConstants</span><span class="o">.</span><span class="na">WRAPPED_PID_TIMEOUT_MILLIS</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这个构造函数中可以看到：Watchdog里面创建了很多的HandlerChecker对象，来监视不同的对象，主要分为两大类：</p>

<ul>
<li>Monitor Checker：这个主要是监测那些实现了Monitor接口的对象，主要是监测锁相关的异常，如死锁</li>
<li>Looper Checker：这个主要监测对应线程中的Loop是否阻塞，从构造函数中，我们可以看到主要监测了IO线程，Main线程，AMS等类</li>
</ul>


<h4>2.2 添加Watchdog监视对象</h4>

<p>Watchdog提供了两种接口来添加监视对象，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addMonitor</span><span class="o">(</span><span class="n">Monitor</span> <span class="n">monitor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Monitors can&#39;t be added once the Watchdog is running&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">mMonitorChecker</span><span class="o">.</span><span class="na">addMonitor</span><span class="o">(</span><span class="n">monitor</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addThread</span><span class="o">(</span><span class="n">Handler</span> <span class="n">thread</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">addThread</span><span class="o">(</span><span class="n">thread</span><span class="o">,</span> <span class="n">DEFAULT_TIMEOUT</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addThread</span><span class="o">(</span><span class="n">Handler</span> <span class="n">thread</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timeoutMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Threads can&#39;t be added once the Watchdog is running&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">HandlerChecker</span><span class="o">(</span><span class="n">thread</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">timeoutMillis</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1.一种是通过<code>addMonitor</code>方法来添加Monitor对象，主要是添加到mMonitorChecker中一个Monitor的集合中</p>

<p>2.一种是通过<code>addThread</code>方法来添加Looper是否阻塞，主要是添加到mHandlerCheckers这个列表中</p>

<p>不管通过哪种方式添加，都是构造出了一个HandlerChecker对象，这是一个实现了Runnable接口的类，这个后面再详细讲。</p>

<p>那么系统一共添加了那些监测对象了，通过搜索代码，我们可以知道系统一些重要的Servcice都添加了监视，比如常见的AMS,PMS,PowerManagerService等都添加对应的监听，如下面的ASM的构造函数中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">Watchdog</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">addMonitor</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Watchdog</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">addThread</span><span class="o">(</span><span class="n">mHandler</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.3 Watchdog的启动和监测</h4>

<p>我们知道Watchdog是一个线程，那么他是在哪里启动的呢？他是在ActivityManagerService准备好之后的回调里面执行的，调用了start方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">mActivityManagerService</span><span class="o">.</span><span class="na">systemReady</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">......</span>
</span><span class='line'>                  <span class="n">traceBeginAndSlog</span><span class="o">(</span><span class="s">&quot;StartWatchdog&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Watchdog</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">traceEnd</span><span class="o">();</span>
</span><span class='line'>          <span class="o">......</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动线程后，会执行Watchdog的run方法，我来看看他的run方法是怎么去监视和处理的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//这里是一个死循环，不断的监测</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">HandlerChecker</span><span class="o">&gt;</span> <span class="n">blockedCheckers</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">allowRestart</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">debuggerWasConnected</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//每次检查的间隔时间，默认是30s</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">timeout</span> <span class="o">=</span> <span class="n">CHECK_INTERVAL</span><span class="o">;</span>
</span><span class='line'>          <span class="c1">//开始遍历所有的HandlerChecker对象，开始检测Looper</span>
</span><span class='line'>          <span class="c1">//注释4</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">HandlerChecker</span> <span class="n">hc</span> <span class="o">=</span> <span class="n">mHandlerCheckers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="n">hc</span><span class="o">.</span><span class="na">scheduleCheckLocked</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">debuggerWasConnected</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">debuggerWasConnected</span><span class="o">--;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// NOTE: We use uptimeMillis() here because we do not want to increment the time we</span>
</span><span class='line'>            <span class="c1">// wait while asleep. If the device is asleep then the thing that we are waiting</span>
</span><span class='line'>            <span class="c1">// to timeout on is asleep as well and won&#39;t have a chance to run, causing a false</span>
</span><span class='line'>            <span class="c1">// positive on when to kill things.</span>
</span><span class='line'>          <span class="c1">//这个地方就是暂停30s</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">timeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">Debug</span><span class="o">.</span><span class="na">isDebuggerConnected</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">debuggerWasConnected</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">wait</span><span class="o">(</span><span class="n">timeout</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">wtf</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">Debug</span><span class="o">.</span><span class="na">isDebuggerConnected</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">debuggerWasConnected</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">timeout</span> <span class="o">=</span> <span class="n">CHECK_INTERVAL</span> <span class="o">-</span> <span class="o">(</span><span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">boolean</span> <span class="n">fdLimitTriggered</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mOpenFdMonitor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">fdLimitTriggered</span> <span class="o">=</span> <span class="n">mOpenFdMonitor</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">fdLimitTriggered</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//注释1</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">waitState</span> <span class="o">=</span> <span class="n">evaluateCheckerCompletionLocked</span><span class="o">();</span>
</span><span class='line'>              <span class="c1">//注释2</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">waitState</span> <span class="o">==</span> <span class="n">COMPLETED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// The monitors have returned; reset</span>
</span><span class='line'>                    <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">waitState</span> <span class="o">==</span> <span class="n">WAITING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// still waiting but within their configured intervals; back off and recheck</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">waitState</span> <span class="o">==</span> <span class="n">WAITED_HALF</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">waitedHalf</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// We&#39;ve waited half the deadlock-detection interval.  Pull a stack</span>
</span><span class='line'>                        <span class="c1">// trace and wait another half.</span>
</span><span class='line'>                        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>                        <span class="n">pids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>                        <span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">dumpStackTraces</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="n">pids</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">getInterestingNativePids</span><span class="o">());</span>
</span><span class='line'>                        <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">//注释3</span>
</span><span class='line'>                <span class="n">blockedCheckers</span> <span class="o">=</span> <span class="n">getBlockedCheckersLocked</span><span class="o">();</span>
</span><span class='line'>                <span class="n">subject</span> <span class="o">=</span> <span class="n">describeCheckersLocked</span><span class="o">(</span><span class="n">blockedCheckers</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">blockedCheckers</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">();</span>
</span><span class='line'>                <span class="n">subject</span> <span class="o">=</span> <span class="s">&quot;Open FD high water mark reached&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">allowRestart</span> <span class="o">=</span> <span class="n">mAllowRestart</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If we got here, that means that the system is most likely hung.</span>
</span><span class='line'>        <span class="c1">// First collect stack traces from all threads of the system process.</span>
</span><span class='line'>        <span class="c1">// Then kill this process so that the system will restart.</span>
</span><span class='line'>      <span class="c1">//注释4</span>
</span><span class='line'>        <span class="n">EventLog</span><span class="o">.</span><span class="na">writeEvent</span><span class="o">(</span><span class="n">EventLogTags</span><span class="o">.</span><span class="na">WATCHDOG</span><span class="o">,</span> <span class="n">subject</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">pids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mPhonePid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">pids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mPhonePid</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Pass !waitedHalf so that just in case we somehow wind up here without having</span>
</span><span class='line'>        <span class="c1">// dumped the halfway stacks, we properly re-initialize the trace file.</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">File</span> <span class="n">stack</span> <span class="o">=</span> <span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">dumpStackTraces</span><span class="o">(</span>
</span><span class='line'>                <span class="o">!</span><span class="n">waitedHalf</span><span class="o">,</span> <span class="n">pids</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">getInterestingNativePids</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Give some extra time to make sure the stack traces get written.</span>
</span><span class='line'>        <span class="c1">// The system&#39;s been hanging for a minute, another second or two won&#39;t hurt much.</span>
</span><span class='line'>        <span class="n">SystemClock</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Trigger the kernel to dump all blocked threads, and backtraces on all CPUs to the kernel log</span>
</span><span class='line'>        <span class="n">doSysRq</span><span class="o">(</span><span class="sc">&#39;w&#39;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">doSysRq</span><span class="o">(</span><span class="sc">&#39;l&#39;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Try to add the error to the dropbox, but assuming that the ActivityManager</span>
</span><span class='line'>        <span class="c1">// itself may be deadlocked.  (which has happened, causing this statement to</span>
</span><span class='line'>        <span class="c1">// deadlock and the watchdog as a whole to be ineffective)</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">dropboxThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="s">&quot;watchdogWriteToDropbox&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mActivity</span><span class="o">.</span><span class="na">addErrorToDropBox</span><span class="o">(</span>
</span><span class='line'>                            <span class="s">&quot;watchdog&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s">&quot;system_server&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">subject</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">stack</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">};</span>
</span><span class='line'>        <span class="n">dropboxThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dropboxThread</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>  <span class="c1">// wait up to 2 seconds for it to return.</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IActivityController</span> <span class="n">controller</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">controller</span> <span class="o">=</span> <span class="n">mController</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Reporting stuck state to activity controller&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Binder</span><span class="o">.</span><span class="na">setDumpDisabled</span><span class="o">(</span><span class="s">&quot;Service dumps disabled due to hung system process.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// 1 = keep waiting, -1 = kill system</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">systemNotResponding</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Activity controller requested to coninue to wait&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Only kill the process if the debugger is not attached.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Debug</span><span class="o">.</span><span class="na">isDebuggerConnected</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">debuggerWasConnected</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">debuggerWasConnected</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Debugger connected: Watchdog is *not* killing the system process&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">debuggerWasConnected</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Debugger was connected: Watchdog is *not* killing the system process&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(!</span><span class="n">allowRestart</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Restart not allowed: Watchdog is *not* killing the system process&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;*** WATCHDOG KILLING SYSTEM PROCESS: &quot;</span> <span class="o">+</span> <span class="n">subject</span><span class="o">);</span>
</span><span class='line'>            <span class="n">WatchdogDiagnostics</span><span class="o">.</span><span class="na">diagnoseCheckers</span><span class="o">(</span><span class="n">blockedCheckers</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;*** GOODBYE!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是run的整个实现，我们一一来看看一些重点的代码：</p>

<p>&#8194; 1. 注释1：在上面等待了固定的时间后，会调用<code>evaluateCheckerCompletionLocked</code>方法去监测各个对象的状态</p>

<p>&#8194;2. 注释2：根据返回的状态，来决定是否继续往下走，还是重复检查，这里涉及三个状态</p>

<p>&#8195;<code>COMPLETED</code>：正常运行，没有阻塞，默认值为0</p>

<p>&#8195;<code>WAITING</code>：如果等待的时间小于最大等待时间的一半时，返回这个值，默认为1</p>

<p>&#8195;<code>WAITED_HALF</code>：如果等待的时间大于最大时间的一半，同时小于最大时间，则返回这个值，默认为2</p>

<p>&#8195;<code>OVERDUE</code>：超过最大的等待时间</p>

<p>具体的可以看<code>getCompletionStateLocked</code>方法对状态的一个判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCompletionStateLocked</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mCompleted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">COMPLETED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">long</span> <span class="n">latency</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">mStartTime</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">latency</span> <span class="o">&lt;</span> <span class="n">mWaitMax</span><span class="o">/</span><span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">WAITING</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">latency</span> <span class="o">&lt;</span> <span class="n">mWaitMax</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">WAITED_HALF</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">OVERDUE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8194;3. 注释3：得到具体的阻塞对象的一些信息</p>

<p>&#8194;4. 注释4：一开始会去调用所有HandlerChecker类的<code>scheduleCheckLocked</code>方法，表示开始去执行检查的代码，而这里的HandlerChecker这个类，是一个实现了Runnable接口的对象，我们先看<code>scheduleCheckLocked</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">scheduleCheckLocked</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//监测Looper对应的queue是否空心啊，如果是的话，直接返回，继续检查</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mMonitors</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">isPolling</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mCompleted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// we already have a check in flight, so no need</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mCurrentMonitor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mStartTime</span> <span class="o">=</span> <span class="n">SystemClock</span><span class="o">.</span><span class="na">uptimeMillis</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">postAtFrontOfQueue</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法的主要功能是：</p>

<p>&#8194;1. 通过<code>mHandler.getLooper().getQueue().isPolling()</code>判断队列是否在轮询中，如果是，表示队列没有阻塞，mCompleted设置为true，直接返回</p>

<p>&#8194;2. 如果没有，则mCompleted设置为false，然后把当前这个Runnable对象通过<code>postAtFrontOfQueue</code>方法发送到队列头部中，等待执行，如果没有执行，那么mCompleted一直未false，则表示可能阻塞。</p>

<p>一旦这个Runnable对象执行，则会执行他的run方法，我们来看下HandlerChecker的run方法，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">mMonitors</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Watchdog</span><span class="o">.</span><span class="na">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCurrentMonitor</span> <span class="o">=</span> <span class="n">mMonitors</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mCurrentMonitor</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Watchdog</span><span class="o">.</span><span class="na">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mCurrentMonitor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法主要的内容是：</p>

<p>1.调用每个Monitor的monitor方法，来检测锁的状态，其实这个一般实现很简单，如AMS的放这个方法实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** In this method we try to acquire our lock to make sure that we have not deadlocked */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是获取锁，如果锁阻塞，那么这个方法会阻塞，Watchdog就会检测到这个异常</p>

<p>2.把mCompleted赋值为true，表示没有问题，顺利执行完了</p>

<h4>2.4 监视对象异常后的操作</h4>

<p>这一块主要是关注Watchdong的run方法，里面有检测</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">......</span>
</span><span class='line'>        <span class="c1">//通过EventLog写入watchdog信息</span>
</span><span class='line'>        <span class="n">EventLog</span><span class="o">.</span><span class="na">writeEvent</span><span class="o">(</span><span class="n">EventLogTags</span><span class="o">.</span><span class="na">WATCHDOG</span><span class="o">,</span> <span class="n">subject</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pids</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">pids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mPhonePid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">pids</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mPhonePid</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Pass !waitedHalf so that just in case we somehow wind up here without having</span>
</span><span class='line'>        <span class="c1">// dumped the halfway stacks, we properly re-initialize the trace file.</span>
</span><span class='line'>      <span class="c1">//开始调用ActivityManagerService dump栈信息</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">File</span> <span class="n">stack</span> <span class="o">=</span> <span class="n">ActivityManagerService</span><span class="o">.</span><span class="na">dumpStackTraces</span><span class="o">(</span>
</span><span class='line'>                <span class="o">!</span><span class="n">waitedHalf</span><span class="o">,</span> <span class="n">pids</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">getInterestingNativePids</span><span class="o">());</span>
</span><span class='line'>                  <span class="c1">//等待dump操作完成</span>
</span><span class='line'>        <span class="n">SystemClock</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>                  
</span><span class='line'>      <span class="c1">//触发内核dump所有的阻塞的线程，backtrace日志</span>
</span><span class='line'>        <span class="n">doSysRq</span><span class="o">(</span><span class="sc">&#39;w&#39;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">doSysRq</span><span class="o">(</span><span class="sc">&#39;l&#39;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Try to add the error to the dropbox, but assuming that the ActivityManager</span>
</span><span class='line'>        <span class="c1">// itself may be deadlocked.  (which has happened, causing this statement to</span>
</span><span class='line'>        <span class="c1">// deadlock and the watchdog as a whole to be ineffective)</span>
</span><span class='line'>      <span class="c1">//尝试把错误信息保存到dropbox中</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">dropboxThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="s">&quot;watchdogWriteToDropbox&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mActivity</span><span class="o">.</span><span class="na">addErrorToDropBox</span><span class="o">(</span>
</span><span class='line'>                            <span class="s">&quot;watchdog&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s">&quot;system_server&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">subject</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">stack</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">};</span>
</span><span class='line'>        <span class="n">dropboxThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dropboxThread</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>  <span class="c1">// wait up to 2 seconds for it to return.</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">IActivityController</span> <span class="n">controller</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">controller</span> <span class="o">=</span> <span class="n">mController</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Reporting stuck state to activity controller&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Binder</span><span class="o">.</span><span class="na">setDumpDisabled</span><span class="o">(</span><span class="s">&quot;Service dumps disabled due to hung system process.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// 1 = keep waiting, -1 = kill system</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">systemNotResponding</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Slog</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Activity controller requested to coninue to wait&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Only kill the process if the debugger is not attached.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Debug</span><span class="o">.</span><span class="na">isDebuggerConnected</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">debuggerWasConnected</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">debuggerWasConnected</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Debugger connected: Watchdog is *not* killing the system process&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">debuggerWasConnected</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Debugger was connected: Watchdog is *not* killing the system process&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(!</span><span class="n">allowRestart</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Restart not allowed: Watchdog is *not* killing the system process&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//开始杀死进程，</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;*** WATCHDOG KILLING SYSTEM PROCESS: &quot;</span> <span class="o">+</span> <span class="n">subject</span><span class="o">);</span>
</span><span class='line'>            <span class="n">WatchdogDiagnostics</span><span class="o">.</span><span class="na">diagnoseCheckers</span><span class="o">(</span><span class="n">blockedCheckers</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Slog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;*** GOODBYE!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">killProcess</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">myPid</span><span class="o">());</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">waitedHalf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发生死锁，异常后，主要的操作为：</p>

<p>&#8194;1. 通过EventLog写入watcndog的event先关信息</p>

<p>&#8194;2. 调用ActivityManagerService dump栈信息</p>

<p>&#8194;3. 触发内核dump所有的阻塞的线程，backtrace日志</p>

<p>&#8194;4. 尝试把错误信息保存到dropbox中</p>

<p>&#8194;5. 并检查activity controller连接的调试器是否可以处理这次watchdog无响应，如果activity controller不要求重启，那么就忽视这次超时，从头继续运行watchdog循环。</p>

<p>&#8194;6. 如果不是debug状态，杀死SystemServer并重启手机，</p>

<h3>三：总结</h3>

<p>整个Watchdog的监测过程如下：</p>

<p>&#8194;1. 在创建SystemServer进程后，创建Watchdog对象，初始化，主要是注册系统reboot的广播监听</p>

<p>&#8194;2. 在AMS准备好后，在器systemReady方法回调中，启动Watchdog线程</p>

<p>&#8194;3. 在一些需要被监听的service中，通过addMonitor和addThread的方法，添加到Watchdog监听中</p>

<p>&#8194;4. Watchdog利用一个死循环，每隔固定的时间（默认为30s）不断的监测对象，主要分为两种：一种是监测Looper队列是否阻塞，如果没有阻塞，则直接返回，继续下次监测。二是监测Monitor对象，并调用monitor方法，判断是否发生死锁。</p>

<p>&#8194;5. 如果发生了死锁或者looper阻塞，则记录下各种日志，并杀死SystemServer进程，重启系统</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android之文件上传原理]]></title>
    <link href="http://blog.lapisy.com/blog/2019/04/21/androidzhi-wen-jian-shang-chuan-yuan-li/"/>
    <updated>2019-04-21T10:43:22+08:00</updated>
    <id>http://blog.lapisy.com/blog/2019/04/21/androidzhi-wen-jian-shang-chuan-yuan-li</id>
    <content type="html"><![CDATA[<h4>基本原理</h4>

<p>我们知道，在浏览器中，我们上传文件时，是这样的（jsp）实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="o">&lt;</span><span class="n">form</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;/blog/upload&quot;</span> <span class="n">method</span><span class="o">=</span><span class="s">&quot;post&quot;</span> <span class="n">enctype</span><span class="o">=</span><span class="s">&quot;multipart/form-data&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;text&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;token&quot;</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;file&quot;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;uploadFile&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;Upload File&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">form</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要指定表单的方法类型，这里一般是<code>post</code>,<code>enctype</code> 属性规定在发送到服务器之前应该如何对表单数据进行编码，一般有如下几种：
- <strong>application/x-www-form-urlencoded</strong>：在发送前编码所有字符（默认）
- <strong>multipart/form-data</strong>: 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。
- <strong>text/plain</strong>:   空格转换为 &ldquo;+&rdquo; 加号，但不对特殊字符编码。</p>

<!--more-->


<p>当点击上传时，可以打开浏览器的网络调试，查看请求体中的数据如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">------</span><span class="n">WebKitFormBoundaryT1HoybnYeFOGFlBR</span>
</span><span class='line'><span class="n">Content</span><span class="o">-</span><span class="nl">Disposition:</span> <span class="n">form</span><span class="o">-</span><span class="n">data</span><span class="o">;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;token&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">xjjdke2m5hkjk3j3k43</span>
</span><span class='line'><span class="o">------</span><span class="n">WebKitFormBoundaryT1HoybnYeFOGFlBR</span>
</span><span class='line'><span class="n">Content</span><span class="o">-</span><span class="nl">Disposition:</span> <span class="n">form</span><span class="o">-</span><span class="n">data</span><span class="o">;</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;file&quot;</span><span class="o">;</span> <span class="n">filename</span><span class="o">=</span><span class="s">&quot;ss.jpg&quot;</span>
</span><span class='line'><span class="n">Content</span><span class="o">-</span><span class="nl">Type:</span> <span class="n">image</span><span class="o">/</span><span class="n">jpeg</span>
</span><span class='line'>
</span><span class='line'><span class="o">....</span><span class="na">jpg的二进制数据</span><span class="o">...</span>
</span><span class='line'><span class="o">------</span><span class="n">WebKitFormBoundaryT1HoybnYeFOGFlBR</span><span class="o">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>从请求中的数据可以看出，请求体中，把所有的数据封装起来，使用<code>------WebKitFormBoundaryT1HoybnYeFOGFlBR</code>来进行隔开，不同类型，一些指定的参数也不一样：
- 如果是简单的键值对，需要指定<code>Content-Disposition</code>也就是内容的描述，同时指定名字和值，也即是<code>name</code>的值以及与其对应的值（这里是token的值）
- 如果是文件的话，不仅要指定内容的描述，name值，还要指定文件的名称<code>filename</code>，内容的类型（如这里传的图片类型），图片的二进制数据</p>

<p>浏览器把这些数据封装到固定的格式后，发送给服务端，而服务端在接受到请求之后，会以这个<code>Boundary</code>的值来分割获取传送过来的值，从而进行处理。</p>

<h4>Android如何来上传文件(不用框架)</h4>

<p>我们知道Android开发时，不像浏览器，会自动的组装这些数据，那么我们在不使用现成的网络请求框架的情况下，如何上传数据呢？
答案很明晰那里 ，只要我们模仿浏览器的行为，人为的把这些数据封装成跟浏览器的一样，放到请求体中，不就可以正常上传了。不多说~~，直接上[<a href="http://blog.csdn.net/lisdye2/article/details/52222645">lisdye2的使用的代码</a>]例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 文件表单上传</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileUpLoadTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 分割符</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">BOUNDARY</span> <span class="o">=</span> <span class="s">&quot;----WebKitFormBoundaryT1HoybnYeFOGFlBR&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * HttpUrlConnection　实现文件上传</span>
</span><span class='line'><span class="cm">     * @param params 普通参数</span>
</span><span class='line'><span class="cm">     * @param fileFormName 文件在表单中的键</span>
</span><span class='line'><span class="cm">     * @param uploadFile 上传的文件</span>
</span><span class='line'><span class="cm">     * @param newFileName 文件在表单中的值（服务端获取到的文件名）</span>
</span><span class='line'><span class="cm">     * @param urlStr url</span>
</span><span class='line'><span class="cm">     * @throws IOException</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">uploadForm</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">,</span> <span class="n">String</span> <span class="n">fileFormName</span><span class="o">,</span> <span class="n">File</span> <span class="n">uploadFile</span><span class="o">,</span> <span class="n">String</span> <span class="n">newFileName</span><span class="o">,</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">urlStr</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">newFileName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">newFileName</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">newFileName</span> <span class="o">=</span> <span class="n">uploadFile</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//开始拼接数据</span>
</span><span class='line'>        <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * 普通的表单数据</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">params</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">params</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;--&quot;</span> <span class="o">+</span> <span class="n">BOUNDARY</span> <span class="o">+</span> <span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;Content-Disposition: form-data; name=\&quot;&quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;\&quot;&quot;</span> <span class="o">+</span> <span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * 上传文件的头</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;--&quot;</span> <span class="o">+</span> <span class="n">BOUNDARY</span> <span class="o">+</span> <span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;Content-Disposition: form-data; name=\&quot;&quot;</span> <span class="o">+</span> <span class="n">fileFormName</span> <span class="o">+</span> <span class="s">&quot;\&quot;; filename=\&quot;&quot;</span> <span class="o">+</span> <span class="n">newFileName</span> <span class="o">+</span> <span class="s">&quot;\&quot;&quot;</span>
</span><span class='line'>                <span class="o">+</span> <span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;Content-Type: image/jpeg&quot;</span> <span class="o">+</span> <span class="s">&quot;\r\n&quot;</span><span class="o">);</span><span class="c1">// 如果服务器端有文件类型的校验，必须明确指定ContentType</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">headerInfo</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">endInfo</span> <span class="o">=</span> <span class="o">(</span><span class="s">&quot;\r\n--&quot;</span> <span class="o">+</span> <span class="n">BOUNDARY</span> <span class="o">+</span> <span class="s">&quot;--\r\n&quot;</span><span class="o">).</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">urlStr</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setRequestMethod</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 设置传输内容的格式，以及长度</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="s">&quot;multipart/form-data; boundary=&quot;</span> <span class="o">+</span> <span class="n">BOUNDARY</span><span class="o">);</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">&quot;Content-Length&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">headerInfo</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="n">uploadFile</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="n">endInfo</span><span class="o">.</span><span class="na">length</span><span class="o">));</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setDoOutput</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">OutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="n">uploadFile</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 写入头部 （包含了普通的参数，以及文件的标示等）</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">headerInfo</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 写入文件</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 写入尾部</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">endInfo</span><span class="o">);</span>
</span><span class='line'>        <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;文件上传成功&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//上传的文件</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;ss.png&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 普通参数</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span> <span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">uploadForm</span><span class="o">(</span><span class="n">params</span><span class="o">,</span> <span class="s">&quot;file&quot;</span><span class="o">,</span> <span class="n">file</span><span class="o">,</span> <span class="s">&quot;ss.jpg&quot;</span><span class="o">,</span> <span class="s">&quot;http://localhost:8080/Web/UploadFile&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码还是比较简单的，相信大部分人，都能够看懂。其基本的原理就是按照顺序，不断的把数据拼接成服务器能够识别的格式也就是上面讲的格式，然后传递给服务端，让其解析处理即可。</p>

<blockquote><p>总结思考：如果自己想封装一个上传的框架或者工具类，一般会做哪些工作呢？
<strong>从上面例子我们可以看到，上传的数据一般分为：键值对和文件两类，如果封装成一个框架，只需要把外面要传入的键值对即键值对的<code>name</code>和<code>value</code>对外暴露。如果是文件，那只要指定文件的路径，文件的名称(<code>filename</code>)，文件的类型(<code>Content-type</code>)，而我们把拼接流程和请求的流程封装起来，不就完成了封装了吗~~</strong></p></blockquote>

<p>如果想知道框架是怎么上传文件的，可以看下[<a href="http://shiyiliang.cn/2017/06/25/Retrofit%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%87%E4%BB%B6%E5%92%8C%E5%8F%82%E6%95%B0%E4%B8%8A%E4%BC%A0/">Retrofit学习之文件上传</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress博客搭建与配置]]></title>
    <link href="http://blog.lapisy.com/blog/2019/04/20/octopressbo-ke-da-jian-yu-pei-zhi/"/>
    <updated>2019-04-20T20:43:48+08:00</updated>
    <id>http://blog.lapisy.com/blog/2019/04/20/octopressbo-ke-da-jian-yu-pei-zhi</id>
    <content type="html"><![CDATA[<h4>一：Octopress安装下载</h4>

<p>前期准备：<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<blockquote><p>注意：<code>bundle install</code>这必须到octopress源码里面去执行，否则会报错</p></blockquote>

<p>基础配置：<a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></p>

<h4>注意事项</h4>

<ul>
<li>需要去掉twitter的所有</li>
<li>去掉所有包含googleapis.com的连接</li>
</ul>


<!--more-->


<h4>二：配置Github</h4>

<p>1.配置ssh，首先执行<code>ssh-keygen -C github-account-email -t rsa</code>，生成公钥<br/>
2.然后进入到.ssh中，把<code>id_rsa.pub</code>文件中的内容复制到github中的ssh key配置中<br/>
3.使用<code>ssh -T git@github.com</code>测试是否配置成功，如果出现下面的类似的提示，表明成功</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hi xxx! You’ve successfully authenticated, bug GitHub does not povide shell access</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>登录 Github 后，新建repository。项目名称（Repository name）命名格式为 <code>username.github.io</code> ，username 是你的 Github 用户名。例如我的用户名是 Lapisy，所以输入 Lapisy.github.io 即可。点击 Create repository 创建。</p></li>
<li><p>绑定本地的博客代码和github</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>提示输入repository的链接，你可以直接复制github中该repository的连接地址即可，例如我这里的是<code>https://github.com/Lapisy/Lapisy.github.io</code></p>

<ol>
<li>现在可以上传代码了</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<h4>三：添加导航栏</h4>

<ol>
<li>使用如下的命令创建页面,会在创建<code>source\名字\index.markdown</code>文件</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">new_page</span><span class="o">[</span><span class="s1">&#39;名字&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在<code>source\_includes\custom\navigation.html</code>中添加连接</li>
</ol>


<h3>四：常用的命令</h3>

<p>1.<code>rake new_post["文章名字"]</code></p>

<blockquote><p><a href="http://octopress.org/docs/blogging/">Octopress创建文章的配置</a></p></blockquote>

<ol>
<li><p><code>rake genetate</code> 编译，生成public目录</p></li>
<li><p><code>rake preview</code> 本地通过 <a href="http://localhost:4000">http://localhost:4000</a> 进行预览</p></li>
</ol>


<p>参考文章：<br/>
<a href="https://www.jianshu.com/p/1a117ef0e534">https://www.jianshu.com/p/1a117ef0e534</a><br/>
<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a><br/>
<a href="https://www.jianshu.com/p/0ac2ac1a8e45">category配置</a><br>
<a href="https://www.jianshu.com/p/fe0e089a985c">https://www.jianshu.com/p/fe0e089a985c</a></p>

<!-- ![测试图片](/images/test.png) -->

]]></content>
  </entry>
  
</feed>
